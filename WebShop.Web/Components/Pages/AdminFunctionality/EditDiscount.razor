@page "/edit-discount"
@page "/edit-discount/{discountCode}"
@inject NavigationManager navigationManager

@if (string.IsNullOrEmpty(discountCode))
{
    <PageTitle>Add a new DiscountCode</PageTitle>
    <h4>Add new Discount</h4>
    Message = "Create Discount";
}
else
{
    <PageTitle>Edit "@currentDiscount.Id"</PageTitle>
    <h3>Edit @currentDiscount.Id</h3>
    Message = "Update Discount";
}

<EditForm Model="currentDiscount" OnValidSubmit="HandleSubmit" FormName="DiscountForm">
    <div>
        <label for="discountCode">DiscountCode</label>
        <InputText id="discountCode" placeholder="If no discountName is provided, it will generate with random letters" @bind-Value="@currentDiscount.DiscountCode" class="form-control" />
    </div>
    <div>
        <label for="discountPercentage">DiscountPercentage</label>
        <InputNumber id="discountPercentage" placeholder="discountPercentage" @bind-Value=@currentDiscount.DiscountPercentage class="form-control"></InputNumber>
    </div>
 @*    <div>
        <label id="discountStatus">discountStatus</label>
        <select @bind="@currentDiscount.IsActive" class="form-control">
            @foreach (var status in Enum.GetValues<DiscountStatus>())
            {
                <option value="@status">@status</option>
            }
        </select>
    </div> *@
    <div>
        <label id="discountType">DiscountType</label>
        <select @bind="@currentDiscount.DiscountType" class="form-control">
            @foreach (var status in Enum.GetValues<DiscountType>())
            {
                <option value="@status">@status</option>
            }
        </select>
    </div>
    <button type="submit" class="btn btn-primary">@Message</button>
</EditForm>

<p>@Status</p>
<br />
<p>@ErrorMessage</p>

@code {
    [Inject]
    private IDiscountService DiscountService { get; set; } = default!;

    [Parameter]
    public string? discountCode { get; set; } = null!;

    [SupplyParameterFromForm]
    public DiscountDto currentDiscount { get; set; } = new();

    private string Status = string.Empty;
    private string Message = string.Empty;
    private string ErrorMessage = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        if (discountCode is not null)
        {
            var discount = await DiscountService.GetDiscount(discountCode);

            if (discount is not null)
            {
                currentDiscount.Id = discount.Id;
                currentDiscount.DiscountCode = discount.DiscountCode;
                currentDiscount.DiscountPercentage = discount.DiscountPercentage;
            }
        }
    }

    private int discountStatus
    {
        get => (int)currentDiscount.IsActive;
        set => currentDiscount.IsActive = (DiscountStatus)value;
    }

    async Task HandleSubmit()
    {
        if (!string.IsNullOrEmpty(discountCode))
        {
            await UpdateDiscount();
        }
        else
        {
            await CreateDiscount();
        }
    }

    async Task UpdateDiscount()
    {
        try
        {
            var result = await DiscountService.UpdateDiscount(currentDiscount);

            if (result)
            {
                Status = "Discount has updated successfully!";
                navigationManager.NavigateTo("DisplayDiscounts");
            }
            else
            {
                Status = "Something went wrong updating discounts";
            }
        }
        catch (Exception)
        {

            ErrorMessage = "Couldn't update discount";
        }

    }

    async Task CreateDiscount()
    {
        try
        {
            var result = await DiscountService.CreateDiscount(currentDiscount);

            if (result != null)
            {
                Status = "Discount added successfully!";
                navigationManager.NavigateTo("DisplayDiscounts");
            }
            else
            {
                Status = "Something went wrong creating a discount";
            }
        }
        catch (Exception)
        {
            ErrorMessage = "Couldnt create discount";
        }
       
    }
}
