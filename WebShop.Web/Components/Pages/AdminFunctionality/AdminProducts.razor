@page "/AdminProducts"


<PageTitle>Products Management</PageTitle>

<AuthorizeView Roles="Admin">
    <Authorized>
        @if (ProductList == null || CategoryList == null)
        {
            <DisplaySpinner />
        }
        else
        {
            <div class="admin-dashboard">
                <div class="sidebar">
                    <div class="filter-group">
                        <input class="filter-input" type="text" placeholder="Filter categories" @bind="filterCategory" @bind:event="oninput" />
                    </div>
                    <div class="filter-group">
                        <input class="filter-input" type="text" placeholder="Filter products" @bind="filterProduct" @bind:event="oninput" />
                    </div>
                </div>
                <div class="content">
                    <h3>Categories</h3>
                    <div class="categories-container">
                        @foreach (var category in CategoryList.Where(c => ApplyFilterCategory(c)))
                        {
                            <div class="category-item">
                                <span>@category.Name</span>
                                <span class="icon-css">@category.IconCSS</span>
                                <a  class="edit-link" href="edit-category/@category.Id">Edit</a>
                            </div>
                        }
                    </div>
                    <a href="edit-category" class="add-btn">Add Category</a>

                    <h3>Products</h3>
                    <div class="products-container">
                        @foreach (var product in ProductList.Where(p => ApplyFilterProduct(p)))
                        {
                            <div class="product-item">
                                <img src="@product.ImageURL" alt="Product Image">
                                <div class="product-info">
                                    <div class="product-detail">Product: @product.Name</div>
                                    <div class="product-detail">Price: @product.Price</div>
                                    <div class="product-detail">Quantity: @product.Quantity</div>
                                    <div class="product-detail">Status: @product.Status</div>
                                </div>
                                <a href="edit-product/@product.Id" class="edit-link">Edit</a>
                            </div>
                        }
                    
                    </div>
                    <a href="edit-product" class="add-btn">Add Product</a>
                </div>
            </div>
        }
    </Authorized>
</AuthorizeView>

@code {

    [Inject]
    IProductsService ProductService { get; set; } = default!;

    [Inject]
    IProductsCategoryService CategoryService { get; set; } = default!;

    List<ProductCategoryDto> CategoryList { get; set; } = default!;

    List<ProductDto> ProductList { get; set; } = default!;

    string? filterProduct { get; set; }
    string? filterCategory { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await FetchProductsAndCategories();

    }

    private async Task FetchProductsAndCategories()
    {
        ProductList = await ProductService.GetProducts();

        CategoryList = await CategoryService.GetCategories();
    }

    private bool ApplyFilterProduct(ProductDto products)
    {
        if (string.IsNullOrEmpty(filterProduct))
            return true;

        if (products.Name.Contains(filterProduct, StringComparison.OrdinalIgnoreCase))
            return true;

        if (products.Description.Contains(filterProduct, StringComparison.OrdinalIgnoreCase))
            return true;
               
        if (products.CategoryName!.Contains(filterProduct, StringComparison.OrdinalIgnoreCase))
            return true;

        if (products.Id.ToString().StartsWith(filterProduct) || products.Id.ToString().StartsWith(filterProduct))
            return true;

        return false;
    }

    private bool ApplyFilterCategory(ProductCategoryDto category)
    {
        if (string.IsNullOrEmpty(filterCategory))
            return true;

        if (category.Name!.Contains(filterCategory, StringComparison.OrdinalIgnoreCase))
            return true;

        if (category.Id.ToString().StartsWith(filterCategory) || category.Id.ToString().StartsWith(filterCategory))
            return true;

        return false;
    }
}
