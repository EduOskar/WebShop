@page "/AdminProducts"
@attribute [StreamRendering]

<PageTitle>Admin Information</PageTitle>


@if (ProductList == null || CategoryList == null)
{
   <DisplaySpinner/>
}
else
{
    <h3>Categories</h3>
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var categories in SortedCategoryList)
            {
                <tr>
                    <td>@categories.Id</td>
                    <td>@categories.Name</td>
                </tr>
            }
        </tbody>
    </table>

    <h3>Product Information</h3>

    <div class="form-group">
        <input class="form-control" type="text" placeholder="filter" @bind="filterText" @bind:event="oninput" />
    </div>
    

    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Description</th>
                <th>CategoryId</th>
                <th>Category</th>
                <th>Price</th>
                <th>Quantity</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var products in SortedProductList)
            {
                if (!ApplyFilter(products))
                {
                    continue;
                }
                <tr>
                    <td>@products.Id</td>
                    <td>@products.Name</td>
                    <td>@products.Description</td>
                    <td>@products.CategoryId</td>
                    <td>@products.CategoryName</td>
                    <td>@products.Price</td>
                    <td>@products.Quantity</td>
                    <td><a href="edit-product/@products.Id">Edit</a></td>
                </tr>
            }
        </tbody>
    </table>
}

<a href="edit-product">Add a Product</a>

@code {

    [Inject]
    IProductsService productService { get; set; } = default!;

    [Inject]
    IProductsCategoryService categoryService { get; set; } = default!;

    List<ProductCategoryDto> CategoryList { get; set; } = default!;
    List<ProductCategoryDto> SortedCategoryList { get; set; } = default!;

    List<ProductDto> ProductList { get; set; } = default!;
    List<ProductDto> SortedProductList { get; set; } = default!;

    ProductDto productDelete { get; set; } = default!;

    string? filterText { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500);
        await SortList();

    }

    private async Task SortList()
    {
        ProductList = await productService.GetProducts();
        SortedProductList = ProductList.OrderBy(x => x.CategoryId).ToList();

        CategoryList = await categoryService.GetCategories();
        SortedCategoryList = CategoryList.OrderBy(x => x.Id).ToList();
    }

    private bool ApplyFilter(ProductDto products)
    {
        if (string.IsNullOrEmpty(filterText))
            return true;

        if (products.Name.Contains(filterText, StringComparison.OrdinalIgnoreCase))
            return true;

        if (products.CategoryName!.Contains(filterText, StringComparison.OrdinalIgnoreCase))
            return true;

        if (products.Id.ToString().StartsWith(filterText) || products.Id.ToString().StartsWith(filterText))
            return true;

        return false;
    }
}
