@page "/DisplayDiscounts"

<PageTitle>Admin Discount</PageTitle>

<AuthorizeView Roles="Admin">
    <Authorized>
        <div class="discounts-layout">
            <aside class="discounts-filter">
                <div class="filter-input-group">
                    <input class="filter-input" type="text" placeholder="Filter discounts..." @bind="filterDiscount" @bind:event="oninput" />
                </div>
            </aside>
            <section class="discounts-content">
                @if (discountList == null)
                {
                    <DisplaySpinner />
                }
                else
                {
                    <h3>Discounts</h3>
                    @foreach (var discount in discountList)
                    {
                        if (!ApplyFilter(discount))
                        {
                            continue;
                        }
                        <div class="discount-item">
                            <div class="discount-info">
                                <span>@discount.Id</span>
                                <span>@discount.DiscountCode</span>
                                <span>@discount.DiscountPercentage %</span>
                                <span>@Enum.GetName(typeof(DiscountStatus), discount.IsActive)</span>
                                <span>@Enum.GetName(typeof(DiscountType), discount.DiscountType)</span>
                            </div>
                            <div class="discount-actions">
                                <select @bind="discount.IsActive" class="status-select">
                                    @foreach (var status in Enum.GetValues<DiscountStatus>())
                                    {
                                        <option value="@status">@status</option>
                                    }
                                </select>
                                <button class="status-update-btn" @onclick="()=>UpdateDiscountStatus(discount)">Update status</button>
                                @if (discount.DiscountType == DiscountType.ProductSpecific && discount.IsActive == DiscountStatus.Active)
                                {
                                    <button class="select-products-btn" @onclick="() => SelectDiscount(discount.Id)">Select Products</button>
                                }
                                else
                                {
                                    <p class="activation-reminder">Activate to apply on products</p>
                                }
                            </div>
                        </div>
                    }
                    <a href="edit-discount" class="add-discount-btn">Add Discount</a>
                }
                <div class="status-message">@status</div>

                @if (ProductList != null && discountId > 0)
                {
                    <section class="products-selection-section">
                        <h4>Apply Discount On Products</h4>
                        <h5>Discount ID: @discountId</h5>
                        @foreach (var product in ProductList)
                        {

                            <div class="product-selection">
                                @if (product.DiscountedPrice == null)
                                {
                                    <input type="checkbox" value="@product.Id" @onchange="@(e => HandleProductSelection(e, product.Id))" />

                                }
                                <span>@product.Name</span>
                            </div>

                        }
                        <button class="apply-discount-btn" @onclick="() => ApplyDiscountOnProducts(productIdList, discountId)">Apply Discount</button>

                    </section>
                }
                @if (discountList != null)
                {
                    <button class="remove-discounts-btn" @onclick="RemoveProductDiscounts">Remove Discounts</button>

                }
            </section>

        </div>
     
    </Authorized>
</AuthorizeView>


@code {
    [Inject]
    protected IDiscountService DiscountSevice { get; set; } = default!;

    [Inject]
    protected IProductsService ProductService { get; set; } = default!;

    protected List<DiscountDto> discountList { get; set; } = default!;

    protected List<ProductDto> ProductList { get; set; } = default!;

    protected List<int> productIdList { get; set; } = new();

    protected int discountId { get; set; }

    string? filterDiscount { get; set; }

    string? status { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await FetchLists();

    }

    private async Task FetchLists()
    {
        discountList = await DiscountSevice.GetDiscounts();

        ProductList = await ProductService.GetProducts();

        productIdList = new();
    }

    private void SelectDiscount(int id)
    {
        discountId = id;
    }

    private async Task SendDiscountMail(int discountId)
    {
        var result = await DiscountSevice.EmailDiscounts(discountId);

        if (result)
        {
            status = "Discounts Email Successfully";
        }
        else
        {
            status = "Discounts Email Failed";
        }
    }

    private async Task UpdateDiscountStatus(DiscountDto discount)
    {
        bool successResponse = await DiscountSevice.UpdateDiscount(discount);
        if (successResponse)
        {
            if (discount.IsActive == DiscountStatus.Active)
            {
                status = "Discounts are now Active";
                await SendDiscountMail(discount.Id!);
                ProductList = await ProductService.GetProducts();
                StateHasChanged();
            }
        }
    }

    private async Task ApplyDiscountOnProducts(List<int> productIdList, int discountId)
    {
        @foreach (var productId in productIdList)
        {
            var response = await DiscountSevice.ApplyDiscountOnProduct(productId, discountId);

            if (response)
            {
                await ActivateProductDiscounts();
            }
            else
            {
                status = "Discounts failed to apply";
            }
        }
    }

    private async Task ActivateProductDiscounts()
    {
        var response = await DiscountSevice.ActivateProductDiscounts();

        if (response)
        {
            status = "Discounts are now active";
            discountId = 0;
            ProductList = await ProductService.GetProducts();
            StateHasChanged();
        }
        else
        {
            status = "Discounts failed to activate";
        }
    }

    private void HandleProductSelection(ChangeEventArgs e, int productId)
    {
        bool isChecked = Convert.ToBoolean(e.Value);
        if (isChecked)
        {
            if (!productIdList.Contains(productId))
            {
                productIdList.Add(productId);
            }
        }
        else
        {
            if (productIdList.Contains(productId))
            {
                productIdList.Remove(productId);
            }
        }
    }

    private async Task RemoveProductDiscounts()
    {
        try
        {
            var response = await DiscountSevice.RemoveProductDiscounts();

            if (response)
            {
                status = "Successfully removed discounts";
                ProductList = await ProductService.GetProducts();
                StateHasChanged();
            }
            else
            {
                status = "Failed to remove discounts";
            }
        }
        catch (Exception)
        {
            status = "There are no active discounts";
        }
       
    }

    private bool ApplyFilter(DiscountDto discount)
    {
        if (string.IsNullOrEmpty(filterDiscount))
            return true;

        if (discount.DiscountCode!.Contains(filterDiscount, StringComparison.OrdinalIgnoreCase))
            return true;

        if (discount.Id.ToString().StartsWith(filterDiscount) || discount.Id.ToString().StartsWith(filterDiscount))
            return true;

        return false;
    }
}
