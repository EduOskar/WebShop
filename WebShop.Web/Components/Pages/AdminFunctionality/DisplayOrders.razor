  @page "/DisplayOrders"


<PageTitle>Display Orders</PageTitle>

<AuthorizeView Roles="Admin">
    <Authorized>
        @if (OrderList == null)
        {
            <DisplaySpinner />
        }
        else
        {
            <div class="admin-dashboard">
                <div class="sidebar">
                    <div class="filter-group">
                        <input class="filter-input" type="text" placeholder="Filter orders..." @bind="filterOrderAndOrderItems" @bind:event="oninput" />
                    </div>
                </div>
                <div class="content">
                    <h3>Orders</h3>
                    <div class="orders-display">
                        @foreach (var order in OrderList)
                        {
                            if (!ApplyFilterOrder(order))
                            {
                                continue;
                            }
                            <div class="order-card" @onclick="() => ToggleOrderItemsVisibility(order.Id)">
                                <div><strong>Order ID:</strong> @order.Id</div>
                                <div><strong>User ID:</strong> @order.UserId</div>
                                <div><strong>Placement Time:</strong> @order.PlacementTime.ToString("yyyy-MM-dd HH:mm")</div>
                                <div><strong>Status:</strong> @order.OrderStatus.CurrentStatus</div>
                                @if (IsOrderItemsVisible(order.Id))
                                {
                                    <div class="order-items">
                                        <h4>Items:</h4>
                                        @foreach (var item in order.OrderItems)
                                        {
                                            <div class="order-item">
                                                <div><strong>Product ID:</strong> @item.Product.Id</div>
                                                <div><strong>Product Name:</strong> @item.Product.Name</div>
                                                <div><strong>Quantity:</strong> @item.Quantity</div>
                                            </div>
                                        }
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
    </Authorized>
</AuthorizeView>



@code {
    [Inject]
    private IOrderItemsService OrderItemsService { get; set; } = default!;

    [Inject]
    private IOrdersService OrderService { get; set; } = default!;

    private List<OrderDto> OrderList { get; set; } = default!;

    private List<OrderItemDto> OrderItemsList { get; set; } = default!;

    private HashSet<int> ExpandedOrders = new HashSet<int>();

    string? filterOrderAndOrderItems { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await FetchOrders();
    }

    protected async Task FetchOrders()
    {
        OrderItemsList = await OrderItemsService.GetOrderItems();

        OrderList = await OrderService.GetOrders();
    }

    private void ToggleOrderItemsVisibility(int orderId)
    {
        if (!ExpandedOrders.Add(orderId))
        {
            ExpandedOrders.Remove(orderId);
        }
    }

    private bool IsOrderItemsVisible(int orderId) => ExpandedOrders.Contains(orderId);


    private bool ApplyFilterOrder(OrderDto order)
    {
        if (string.IsNullOrEmpty(filterOrderAndOrderItems))
            return true;

        if (order.Id.ToString().StartsWith(filterOrderAndOrderItems) || order.Id.ToString().StartsWith(filterOrderAndOrderItems))
            return true;

        return false;
    }

    private bool ApplyFilterOrderItems(OrderItemDto orderItem)
    {
        if (string.IsNullOrEmpty(filterOrderAndOrderItems))
            return true;

        if (orderItem.OrderId.ToString().StartsWith(filterOrderAndOrderItems) || orderItem.OrderId.ToString().StartsWith(filterOrderAndOrderItems))
            return true;

        if (orderItem.Product.Name!.Contains(filterOrderAndOrderItems, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }
}
