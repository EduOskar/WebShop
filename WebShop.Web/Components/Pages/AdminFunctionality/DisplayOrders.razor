@page "/DisplayOrders"


<PageTitle>Display Orders</PageTitle>
<AuthorizeView Roles="Admin">
    <Authorized>
        @if (OrderItemsList == null || OrderList == null)
        {
            <DisplaySpinner />
        }
        else
        {
            <h3>DisplayOrders</h3>

            <div class="form-group">
                <input class="form-control" type="text" placeholder="filter" @bind="filterOrderAndOrderItems" @bind:event="oninput" />
            </div>

            <table class="table">
                <thead>
                    <tr>
                        <th>orderId</th>
                        <th>userId</th>
                        <th>order placementTime</th>
                        <th>OrderStatus</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var order in OrderList)
                    {
                        @if (!ApplyFilterOrder(order))
                        {
                            continue;
                        }
                        <tr>
                            <td>@order.Id</td>
                            <td>@order.UserId</td>
                            <td>@order.PlacementTime</td>
                            <td>@order.OrderStatus.CurrentStatus</td>
                        </tr>
                    }
                </tbody>

            </table>

            <br />
            <h3>OrderItems</h3>
            <br />

            <table class="table">
                <thead>
                    <tr>
                        <th>OrderId</th>
                        <th>productId</th>
                        <th>Productname</th>
                        <th>Quantity</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var orderItem in OrderItemsList)
                    {
                        @if (!ApplyFilterOrderItems(orderItem))
                        {
                            continue;
                        }
                        <tr>
                            <td>@orderItem.OrderId</td>
                            <td>@orderItem.Product.Id</td>
                            <td>@orderItem.Product.Name</td>
                            <td>@orderItem.Quantity</td>
                        </tr>

                    }
                </tbody>
            </table>
        }

    </Authorized>
</AuthorizeView>



@code {
    [Inject]
    private IOrderItemsService OrderItemsService { get; set; } = default!;

    [Inject]
    private IOrdersService OrderService { get; set; } = default!;

    private List<OrderDto> OrderList { get; set; } = default!;

    private List<OrderItemDto> OrderItemsList { get; set; } = default!;

    string? filterOrderAndOrderItems { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await FetchOrders();
    }

    protected async Task FetchOrders()
    {
        OrderItemsList = await OrderItemsService.GetOrderItems();

        OrderList = await OrderService.GetOrders();
    }

    private bool ApplyFilterOrder(OrderDto order)
    {
        if (string.IsNullOrEmpty(filterOrderAndOrderItems))
            return true;

        if (order.Id.ToString().StartsWith(filterOrderAndOrderItems) || order.Id.ToString().StartsWith(filterOrderAndOrderItems))
            return true;

        return false;
    }

    private bool ApplyFilterOrderItems(OrderItemDto orderItem)
    {
        if (string.IsNullOrEmpty(filterOrderAndOrderItems))
            return true;

        if (orderItem.OrderId.ToString().StartsWith(filterOrderAndOrderItems) || orderItem.OrderId.ToString().StartsWith(filterOrderAndOrderItems))
            return true;

        if (orderItem.Product.Name!.Contains(filterOrderAndOrderItems, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }
}
