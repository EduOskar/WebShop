@page "/edit-product"
@page "/edit-product/{Id:int}"
@inject NavigationManager navigationManager


@if (Id is null)
{
    <PageTitle>Add a new Product</PageTitle>
    <h3>Add a new Product</h3>
    Message = "Create Product";
}
else
{
    <PageTitle>Edit "@CurrentProduct.Name"</PageTitle>
    <h3>Edit @CurrentProduct.Name</h3>
    Message = "Update Product";
}

<EditForm Model="CurrentProduct" OnValidSubmit="HandleSubmit" FormName="ProductForm">
    <div>
        <label for="name">name</label>
        <InputText id="name" @bind-Value="@CurrentProduct.Name" class="form-control" />
    </div>
    <div>
        <label for="description">description</label>
        <InputText id="description" @bind-Value="@CurrentProduct.Description" class="form-control" />
    </div>
    <div>
        <label for="imageurl">ImageUrl</label>
        <InputText id="imageurl" @bind-Value="@CurrentProduct.ImageURL" class="form-control"/>
    </div>
    <div>
        <label for="categoryid">categoryid</label>
        <InputNumber id="categoryid" @bind-Value="@CurrentProduct.CategoryId" class="form-control" />
    </div>
    <div>
        <label for="price">price</label>
        <InputNumber id="price" @bind-Value="@CurrentProduct.Price" class="form-control" />
    </div>
    <div>
        <label for="quantity">quantity</label>
        <InputNumber id="quantity" @bind-Value="@CurrentProduct.Quantity" class="form-control" />
    </div>
    <br />
    <button type="submit" class="btn btn-primary">@Message</button>
    <button type="button" class="btn btn-danger"
        @onclick="DeleteProduct">
        Delete Product
    </button>
</EditForm>

<p>@Status</p>



@code {
    [Inject]
    private IProductsService ProductService { get; set; } = default!;

    [Parameter]
    public int? Id { get; set; } = null;

    [SupplyParameterFromForm]
    public ProductDto CurrentProduct { get; set; } = new();

    private string Status = string.Empty;
    private string Message = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        if (Id is not null)
        {
            var product = await ProductService.GetProduct(Id.Value)!;
            if (product is not null)
            {
                CurrentProduct.Id = product.Id;
                CurrentProduct.Name ??= product.Name;
                CurrentProduct.Description ??= product.Description;
                CurrentProduct.ImageURL ??= product.ImageURL;
                CurrentProduct.CategoryId = product.CategoryId;
                CurrentProduct.CategoryName ??= product.CategoryName;
                CurrentProduct.Price = product.Price;
                CurrentProduct.Quantity = product.Quantity;
            }
        }
    }

    async Task HandleSubmit()
    {
        if (Id is not null)
        {
            await UpdateProduct();
        }
        else
        {
            await CreateProduct();
        }
    }

    async Task CreateProduct()
    {
        var result = await ProductService.CreateProduct(CurrentProduct);

        if (result != null)
        {
            Status = "Product added successfully!";
            navigationManager.NavigateTo("AdminProducts");
        }
        else
        {
            Status = "Something went wrong";
        }
    }

    async Task UpdateProduct()
    {
        var result = await ProductService.UpdateProduct(CurrentProduct);

        if (result)
        {
            Status = "Product Updated Successfully!";
            navigationManager.NavigateTo("AdminProducts");
        }
        else
        {
            Status = "Something went wrong";
        }
    }

    async Task DeleteProduct()
    {
        await ProductService.DeleteProduct(CurrentProduct.Id);
        navigationManager.NavigateTo("AdminProducts");
    }
}
