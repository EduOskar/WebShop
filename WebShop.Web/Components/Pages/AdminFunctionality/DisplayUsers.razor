@page "/DisplayUsersAndRoles"

<PageTitle>Users Information</PageTitle>

<AuthorizeView Roles="Admin">
    <Authorized>
        @if (UserList == null || RolesList == null)
        {
            <DisplaySpinner />
        }
        else
        {
            <div class="admin-dashboard">
                <div class="sidebar">
                    <div class="filter-group">
                        <input class="filter-input" type="text" placeholder="Filter users..." @bind="filterUser" @bind:event="oninput" />
                    </div>
                </div>
                <div class="content">
                    <h3>Users</h3>
                    <div class="users-display">
                        @foreach (var user in UserList)
                        {
                            if (!ApplyFilterUsers(user))
                            {
                                continue;
                            }
                            <div class="user-card">
                                <div class="user-info">
                                    <div><strong>ID:</strong> @user.Id</div>
                                    <div><strong>Name:</strong> @user.FirstName @user.LastName</div>
                                    <div><strong>Username:</strong> @user.UserName</div>
                                    <div><strong>Email:</strong> @user.Email</div>
                                    <div><strong>Phone:</strong> @user.Phonenumber</div>
                                    <div><strong>Address:</strong> @user.Adress</div>
                                </div>
                                <a href="edit-user/@user.Id" class="edit-btn">Edit</a>
                            </div>
                        }
                    </div>
                    <a href="add-user" class="add-user-btn">Add User</a>

                    <h3>Roles</h3>
                    <div class="roles-display">
                        @foreach (var role in RolesList)
                        {
                            <div class="role-card">
                                <div><strong>Role ID:</strong> @role.Id</div>
                                <div><strong>Name:</strong> @role.Name</div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
    </Authorized>
</AuthorizeView>

@code {
    [Inject]
    IUsersService UserService { get; set; } = default!;

    [Inject]
    private IUsersAndRoleService RoleService { get; set; } = default!;

    List<UserRoleDto> UserRolesList { get; set; } = default!;

    List<RolesDto> RolesList { get; set; } = default!;

    List<UserDto> UserList { get; set; } = default!;

    private string? ErrorMessage = string.Empty;

    string? filterUser { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await FetchUsersAndRoles();
    }

    private async Task FetchUsersAndRoles()
    {
        try
        {
            RolesList = await RoleService.GetRoles();

            UserRolesList = await RoleService.GetUsersAndRoles();

            UserList = await UserService.GetUsers();
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }

    }

    private bool ApplyFilterUsers(UserDto users)
    {
        if (string.IsNullOrEmpty(filterUser))
            return true;

        if (users.FirstName.Contains(filterUser, StringComparison.OrdinalIgnoreCase))
            return true;

        if (users.LastName!.Contains(filterUser, StringComparison.OrdinalIgnoreCase))
            return true;

        if (users.Adress!.Contains(filterUser, StringComparison.OrdinalIgnoreCase))
            return true;

        if (users.Phonenumber!.Contains(filterUser, StringComparison.OrdinalIgnoreCase))
            return true;

        if (users.Email!.Contains(filterUser, StringComparison.OrdinalIgnoreCase))
            return true;

        if (users.Id.ToString().StartsWith(filterUser) || users.Id.ToString().StartsWith(filterUser))
            return true;

        return false;
    }

}
