

<button type="button" class="btn btn-info" data-bs-toggle="modal" data-bs-target="#addReviewModal">
    Add Review
</button>

<div class="modal fade" id="addReviewModal" tabindex="-1" aria-labelledby="addReviewModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addReviewModalLabel">Add a Review for @Product?.Name</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="Review" OnValidSubmit="HandleReviewSubmit">
                    <div class="form-group">
                        <label for="reviewTitle">Title</label>
                        <InputTextArea id="reviewTitle" class="form-control" @bind-Value="Review.Title" />
                    </div>
                    <div class="form-group">
                        <label for="reviewContent">Content</label>
                        <InputTextArea id="reviewContent" class="form-control" @bind-Value="Review.Content" />
                    </div>
                    <button type="submit" class="btn btn-primary">Submit Review</button>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@if (submitStatus != null)
{
    <div class="alert @alertClass" role="alert">
        @submitStatus
    </div>
}


@code {
    [Parameter]
    public int ProductId { get; set; }

    [Parameter]
    public int UserId { get; set; }

    [Parameter]
    public EventCallback<bool> OnReviewSaved { get; set; }

    [Inject]
    private IReviewServices ReviewService { get; set; } = default!;

    [Inject]
    private IProductsService ProductService { get; set; } = default!;

    private ProductDto Product { get; set; } = default!;

    [Parameter]
    public ReviewDto Review { get; set; } = default!;

    // public ReviewDto reviewCreate { get; set; } = new();

    public bool IsEditMode => Review != null && Review.Id > 0;
    private string? submitStatus;
    private string? alertClass;

    protected override async Task OnParametersSetAsync()
    {
        Product = await ProductService.GetProduct(ProductId);

        if (Review == null || Review?.Id == 0)
        {
            Review!.ProductId = ProductId;
            Review.UserId = UserId;
            Review.CreatedAt = DateTime.UtcNow;
            Review.Content = Review.Content;
            Review.Title = Review.Title;
        }
    }

    private async Task HandleReviewSubmit()
    {
        Review.UserId = UserId;

        if (IsEditMode)
        {
            var successStatus = await ReviewService.UpdateReview(Review);

            if (successStatus)
            {
                submitStatus = "Review updated successfully!";
                alertClass = "alert-success";
            }
            else
            {
                submitStatus = "Review updated Failed!";
                alertClass = "alert-danger";
            }

        }
        else
        {
            var createdReview = await ReviewService.CreateReview(Review);
            if (createdReview != null)
            {
                submitStatus = "Review added successfully!";
                alertClass = "alert-success";
                Review = new ReviewDto { ProductId = ProductId, UserId = UserId };
            }
            else
            {
                submitStatus = "Failed to add review. Please try again.";
                alertClass = "alert-danger";
            }
        }

        await OnReviewSaved.InvokeAsync(true);
    }
}