@page "/reset-password"
@using System.Web
@inject NavigationManager navigationManager

<EditForm class="form-group" Model="resetPasswordRequest" OnValidSubmit="OnSubmit">
    <DataAnnotationsValidator />

    <InputText type="hidden" @bind-Value="resetPasswordRequest.Email" />
    <InputText type="hidden" @bind-Value="resetPasswordRequest.Token" />

    <label for="inputPassword" class="sr-only">New Password</label>
    <InputText id="inputPassword" class="form-control" placeholder="New Password" @bind-Value="resetPasswordRequest.Password" />

    <label for="inputConfirmPassword" class="sr-only">Confirm Password</label>
    <InputText id="inputConfirmPassword" class="form-control" placeholder="Confirm Password" @bind-Value="resetPasswordRequest.ConfirmPassword" />

    <ValidationSummary />

    <button class="btn btn-sm btn-primary btn-block" type="submit">Reset Password</button>
</EditForm>


@code {
    [Inject]
    IAuthService authService { get; set; } = default!;

    [Parameter]
    public string? Token { get; set; }
    public string? Email { get; set; }

    ResetPasswordDto resetPasswordRequest = new();

    string? error;

    protected override void OnInitialized()
    {
        var uri = new Uri(navigationManager.Uri);
        Email = HttpUtility.ParseQueryString(uri.Query).Get("email");
        Token = HttpUtility.ParseQueryString(uri.Query).Get("token");

        if (!string.IsNullOrEmpty(Token) && !string.IsNullOrEmpty(Email))
        {
            resetPasswordRequest.Email = Email;
            resetPasswordRequest.Token = Token;
        }
        else
        {
            navigationManager.NavigateTo("/");
        }
    }

    async Task OnSubmit()
    {
        await authService.ResetPassword(resetPasswordRequest);
        navigationManager.NavigateTo("/");
    }
}
