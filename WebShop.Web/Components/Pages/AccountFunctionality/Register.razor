@page "/register"
@inject NavigationManager navigationManager
@inject CustomStateProvider authStateProvider


<div class="register-container">
    <h1 class="register-title">Register</h1>
    <EditForm class="form-register" OnValidSubmit="OnSubmit" Model="registerRequest">
        <DataAnnotationsValidator />
        <div class="input-container">
            <InputText id="inputFirstName" class="form-control" placeholder="Firstname" @bind-Value="@registerRequest.FirstName" />
            <ValidationMessage For="@(() => registerRequest.FirstName)" />
        </div>
       
        <div class="input-container">
            <InputText id="inputLastName" class="form-control" placeholder="Lastname" @bind-Value="@registerRequest.LastName" />
            <ValidationMessage For="@(() => registerRequest.LastName)" />
        </div>
       
        <div class="input-container">
            <InputText id="inputEmail" class="form-control" placeholder="E-mail" @bind-Value="@registerRequest.Email" />
            <ValidationMessage For="@(() => registerRequest.Email)" />
        </div>
       
        <div class="input-container">
            <InputText id="inputAdress" class="form-control" placeholder="Address" @bind-Value="@registerRequest.Adress" />
            <ValidationMessage For="@(() => registerRequest.Adress)" />
        </div>
        
        <div class="input-container">
            <InputText id="inputPhonenumber" class="form-control" placeholder="(+xx)-xxx xxx xxx" @bind-Value="@registerRequest.Phonenumber" />
            <ValidationMessage For="@(() => registerRequest.Phonenumber)" />
        </div>

        <div class="input-container">
            <InputText id="inputUsername" class="form-control" placeholder="Username" @bind-Value="@registerRequest.UserName" />
            <ValidationMessage For="@(() => registerRequest.UserName)" />
        </div>
   
        <div class="input-container">
            <InputText type="password" id="inputPassword" class="form-control" placeholder="Password" @bind-Value="@registerRequest.Password" />
            <ValidationMessage For="@(() => registerRequest.Password)" />
        </div>
       
        <div class="input-container">
            <InputText type="password" id="inputConfirmPassword" class="form-control" placeholder="Confirm Password" @bind-Value="@registerRequest.ConfirmPassword" />
            <ValidationMessage For="@(() => registerRequest.ConfirmPassword)" />
        </div>


        <button class="btn-submit" type="submit">Create account</button>

        @if (!string.IsNullOrEmpty(error))
        {
            <div class="text-danger">@error</div>
        }

        <div class="login-link-container">
            <NavLink href="login" class="login-link">
                Already have an account? Click here to login
            </NavLink>
        </div>
    </EditForm>
</div>

@code {
    UserDto registerRequest { get; set; } = new UserDto();
    string? error { get; set; }
    async Task OnSubmit()
    {
        error = null;
        try
        {
            await authStateProvider.Register(registerRequest);
            navigationManager.NavigateTo("/Products");
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }
}