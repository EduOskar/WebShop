@inject IJSRuntime JsRuntime

@if (Review != null)
{
    <div class="review-card">
        <div class="review-header">
            <div class="user-info">
                <span class="review-username">Review by @Review.User!.UserName</span>
                <span class="review-date">Posted: @Review.CreatedAt?.ToString("yyyy-MM-dd")</span>
            </div>
            <h4 class="review-title">Title: @Review.Title</h4>
            <div class="title-underline"></div> <!-- Line below the title -->
        </div>
        <div class="review-body">
            <p class="review-content">@Review.Content</p>
        </div>
        @if (CanEdit)
        {
            <div class="review-actions">
                <button @onclick="ShowEditModal" class="btn-edit">Edit</button>
                <button @onclick="DeleteReview" class="btn-delete">Delete</button>
            </div>
        }
    </div>
}

@if (submitStatus != null)
{
    <div class="alert @alertClass" role="alert">
        @submitStatus
    </div>
}

@code {
    [Inject]
    private IReviewServices reviewServices { get; set; } = default!;

    [Parameter]
    public ReviewDto Review { get; set; } = default!;

    [Parameter]
    public EventCallback<ReviewDto> OnEditRequested { get; set; }

    [Parameter]
    public EventCallback<bool> OnReviewDeleted { get; set; }

    [Parameter]
    public int UserId { get; set; }

    private bool CanEdit => Review.UserId == UserId;

    private string? submitStatus;
    private string? alertClass;

    private void ShowEditModal()
    {
        OnEditRequested.InvokeAsync(Review);
    }

    private async Task DeleteReview()
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");

        if (confirmed)
        {
            var successStatus = await reviewServices.DeleteReview(Review.Id, UserId);

            if (successStatus)
            {
                submitStatus = "Review deleted successfully!";
                alertClass = "alert-success";
            }
            else
            {
                submitStatus = "Review deleted failed!";
                alertClass = "alert-danger";
            }
        }
        await OnReviewDeleted.InvokeAsync(true);
    }
}