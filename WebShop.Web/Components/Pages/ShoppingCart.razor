@page "/ShoppingCart"
@inject IJSRuntime Js
@inject NavigationManager navigationManager
@inject CustomStateProvider authenticationStateProvider

@if (ShoppingCartItems == null && ErrorMessage == null)
{
    <DisplaySpinner />
}
else if (ErrorMessage != null)
{
    <DisplayError ErrorMessage="@ErrorMessage"></DisplayError>
}
else
{
    <h3 class="mb-5">Shopping Cart</h3>
    if (ShoppingCartItems?.Count() > 0)
    {
        <div class="row mb-5">
            <div class="col-md-9">
                @foreach (var item in ShoppingCartItems)
                {
                    <div class="row mb-4">
                        <div class="col-md-4">
                            <img src="@item.ProductImageUrl" width="300" class="img-thumbnail" />
                        </div>
                        <div class="col-md-8">
                            <h5>@item.ProductName</h5>
                            <div class="mb-4">@item.ProductDescription</div>
                            <span>
                                @if (item.Product!.DiscountedPrice == null)
                                {
                                    <span>
                                        Price: <b> @item.Price.ToString("C")</b>
                                    </span>
                                }
                                else
                                {
                                    <span>
                                        Price:  <b>@item.Product.DiscountedPrice.ToString()</b>
                                    </span>
                                }
                                <input type="number" @bind="@item.Quantity" />
                                <button data-itemId="@item.Id" class="btn btn-info btn-sm update-Quantity"
                                        @onclick="(() => UpdateQtyCartItem_Click(item.Id, item.Quantity))">
                                    Update quantity
                                </button>
                            </span>

                            <div>
                                <button @onclick="(() => DeleteCartItem_click(item.Id))"
                                        class="btn btn-danger sm">
                                    <i class="fa fa-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                }

            </div>
            <div class="col-md-3">
                <h5>Cart Summary</h5>
                <div class="mt-2">
                    <div>Total - (@TotalQuantity items)&nbsp;<b>@TotalPrice</b> </div>
                    <a href="/Checkout" class="btn btn-success">
                        <span class="pointer-event oi-credit-card"></span>&nbsp; Proceed to Checkout
                    </a>
                </div>
            </div>
        </div>

        if (RelatedProductList == null)
        {
            <DisplaySpinner />
        }
        else
        {
            <p>Other Customers have also purchased these items</p>
            <div class="product-container d-flex flex-wrap justify-content-start">

                @foreach (var product in RelatedProductList)
                {
                    <a href="/ProductDetails/@product.Id" class="product-card">
                        <div class="card">
                            <img class="img-thumbnail" src="@product.ImageURL" alt="@product.Name" />
                            <div class="card-body">
                                <h5 class="card-title mb-3">@product.Name</h5>
                                <p class="card-text"><b>@product.Price.ToString("C")</b></p>
                                @if (product.DiscountedPrice > 0)
                                {
                                    <p class="card-text">Discounted price: <b>@product.DiscountedPrice.ToString()</b></p>
                                }
                            </div>
                        </div>
                    </a>
                }
            </div>
        }
    }
    else
    {
        @if (!User.Identity!.IsAuthenticated)
        {
            <h5>You need to be logged in to have a shoppingcart</h5>
            <a href="" class="btn btn-success">
                <span></span>&nbsp; Proceed to login
            </a>
        }
        else
        {
            <h4>There are currently no items in your shopping Cart</h4>
        }

    }
}


@code {


    [Inject]
    public ICartItemsService CartItemsService { get; set; } = default!;

    [Inject]
    public IUsersService UserService { get; set; } = default!;

    [Inject]
    public IProductsService ProductService { get; set; } = default!;

    public List<CartItemDto> ShoppingCartItems { get; set; } = default!;

    public IEnumerable<ProductDto> ProductList { get; set; } = default!;

    public IEnumerable<ProductDto> RelatedProductList { get; set; } = default!;

    IEnumerable<int> categoryIds = default!;

    IEnumerable<int> productIdsInCart = default!;

    private ClaimsPrincipal User = default!;
    private int UserId;

    public string? ErrorMessage { get; set; }

    protected string TotalPrice { get; set; } = default!;
    protected int TotalQuantity { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await GetAuthenticatedUserCart();

            ShoppingCartItems = await CartItemsService.GetCartItems(UserId);

            categoryIds = ShoppingCartItems.Select(item => item.Product!.CategoryId).Distinct();

            productIdsInCart = ShoppingCartItems.Select(item => item.ProductId).Distinct();

            await GetSuggestedProducts(categoryIds, productIdsInCart);

            CartChanged();

        }
        catch (Exception ex)
        {

            ErrorMessage = ex.Message;
        }
    }

    protected async Task GetSuggestedProducts(IEnumerable<int> categoryIds, IEnumerable<int> excludedProductIds, int maxPercategory = 4)
    {
        ProductList = await ProductService.GetProducts();

        var filteredProducts = ProductList.Where(product => !excludedProductIds.Contains(product.Id));

        if (categoryIds.Count() == 1)
        {
            RelatedProductList = filteredProducts
               .Where(product => categoryIds.Contains(product.CategoryId))
               .GroupBy(product => product.CategoryId)
               .SelectMany(group => group.Take(4));
        }
        else if (categoryIds.Count() == 2)
        {
            RelatedProductList = filteredProducts
             .Where(product => categoryIds.Contains(product.CategoryId))
             .GroupBy(product => product.CategoryId)
             .SelectMany(group => group.Take(2));
        }
        else
        {
            RelatedProductList = filteredProducts
               .Where(product => categoryIds.Contains(product.CategoryId))
               .GroupBy(product => product.CategoryId)
               .SelectMany(group => group.Take(1));

        }
        StateHasChanged();
    }

    protected async Task GetAuthenticatedUserCart()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();

        User = authState.User;

        string userIdClaimValue = User.FindFirst(ClaimTypes.NameIdentifier)?.Value!;
        if (int.TryParse(userIdClaimValue, out int userId))
        {
            UserId = userId;
        }
    }

    protected async Task DeleteCartItem_click(int cartItemid)
    {
        var cartItemDelete = await CartItemsService.DeleteCartItem(cartItemid);

        RemoveCartItem(cartItemid);

        CartChanged();

        await GetSuggestedProducts(categoryIds, productIdsInCart);
    }

    protected async Task UpdateQtyCartItem_Click(int cartItemid, int quantity)
    {
        try
        {
            if (quantity > 0)
            {
                var updateItemDto = new CartItemQtyUpdateDto
                    {
                        CartItemId = cartItemid,
                        Quantity = quantity
                    };

                var returnedUpdatedItemDto = await CartItemsService.UpdateCartItemQty(updateItemDto);

                UpdateItemTotalPrice(returnedUpdatedItemDto);

                CartChanged();

            }
            else
            {
                var cartItem = ShoppingCartItems.FirstOrDefault(i => i.Id == cartItemid);

                if (cartItem != null)
                {
                    cartItem.Quantity = 1;
                    cartItem.TotalPrice = cartItem.Price;
                }
            }
        }
        catch (Exception)
        {

            throw;
        }
    }


    private void UpdateItemTotalPrice(CartItemDto cartItemDto)
    {
        var cartItem = GetCartItem(cartItemDto.Id);

        if (cartItem != null)
        {
            if (cartItem.Product?.DiscountedPrice > 0 || cartItem.Product!.DiscountedPrice.HasValue)
            {
                cartItem.TotalPrice = cartItem.Product.DiscountedPrice.Value * cartItem.Quantity;
            }
            else
            {
                cartItem.TotalPrice = cartItem.Price * cartItem.Quantity;
            }

        }
    }

    private void CalculateCartSummaryTotals()
    {
        SetTotalPrice();
        SetTotalQuantity();
    }

    private void SetTotalPrice()
    {
        TotalPrice = ShoppingCartItems.Sum(item =>
        {

            var priceToUse = item.Product!.DiscountedPrice.HasValue ? item.Product.DiscountedPrice.Value : item.Product.Price;

            return priceToUse * item.Quantity;
        }).ToString("C");

    }

    private void SetTotalQuantity()
    {
        TotalQuantity = ShoppingCartItems.Sum(p => p.Quantity);

    }

    private CartItemDto GetCartItem(int userId)
    {
        var cartItems = ShoppingCartItems.FirstOrDefault(ci => ci.Id == userId);

        return cartItems!;

    }

    private void RemoveCartItem(int cartItemId)
    {
        var cartItem = GetCartItem(cartItemId);

        ShoppingCartItems.Remove(cartItem);

    }

    private void CartChanged()
    {
        CalculateCartSummaryTotals();
        CartItemsService.RaiseEventOnShoppingCartChanged(TotalQuantity);
    }
}

