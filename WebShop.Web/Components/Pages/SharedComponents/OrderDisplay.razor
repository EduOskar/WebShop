@if (Order != null)
{
   
    <div class="order-container">
        <div class="order">
            <div @onclick="ToggleDetails">
                <Button Class="centered-button">Order ID: @Order.Id - Placed: @Order.OrderStatus.StatusDate - OrderStatus: @Order.OrderStatus.CurrentStatus</Button>
            </div>
            @if (Order.OrderStatus.CurrentStatus == OrderStatusType.New)
            {
                <Button @onclick="CancelOrder" class="cancel-button">Cancel Order</Button>
                @if (submitStatus != null)
                {
                    <div class="alert @alertClass" role="alert">
                        @submitStatus
                    </div>
                }
            }
            @if (showDetails)
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th>Product Name</th>
                            <th>Description</th>
                            <th>Quantity</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var orderItems in Order.OrderItems)
                        {
                            <tr>
                                <td>@orderItems.Product.Name</td>
                                <td>@orderItems.Product.Description</td>
                                <td>@orderItems.Quantity</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
}

<ConfirmDialog @ref="dialog" />

@code {
    [Inject]
    public IOrdersService orderService { get; set; } = default!;

    [Parameter]
    public OrderDto Order { get; set; } = default!;

    [Parameter]
    public EventCallback<bool> OnOrdercancelled { get; set; }

    public ConfirmDialog dialog = default!;

    private bool showDetails = false;

    private void ToggleDetails() => showDetails = !showDetails;

    private string? submitStatus;
    private string? alertClass;

    private async Task CancelOrder()
    {
        if (Order.OrderStatus.CurrentStatus == OrderStatusType.New)
        {
            var options = new ConfirmDialogOptions { IsVerticallyCentered = true };
            var confirmation = await dialog.ShowAsync(
                title: "Are you sure you want to cancle order?",
                message1: "Do you want to proceed?",
                confirmDialogOptions: options
        );

            if (confirmation)
            {
                bool success = await orderService.UpdateOrderStatus(Order.Id, OrderStatusType.Cancelled);

                if (success)
                {
                    submitStatus = "Order cancelled successfully!";
                    alertClass = "alert-success";
                    await OnOrdercancelled.InvokeAsync(true);
                }
                else
                {
                    submitStatus = "Order cancelled Failed!";
                    alertClass = "alert-danger";
                }
            }
        }
    }
}