@if (Order != null)
{

    <div class="order-container">
        <div class="order-card" @onclick="ToggleDetails">
            <div class="order-header">
                <button class="centered-button">Order ID: @Order.Id - Placed: @Order.OrderStatus.StatusDate.ToString("yyyy-MM-dd") - Status: @Order.OrderStatus.CurrentStatus</button>
            </div>
            @if (Order.OrderStatus.CurrentStatus == OrderStatusType.New)
            {
                <button @onclick="CancelOrder" class="cancel-button">Cancel Order</button>
                @if (submitStatus != null)
                {
                    <div class="alert @alertClass" role="alert">
                        @submitStatus
                    </div>
                }
            }
            @if (showDetails)
            {
                <div class="order-details">
                    @foreach (var orderItems in Order.OrderItems)
                    {
                        <div class="order-item">
                            <div><strong>Product:</strong> @orderItems.Product.Name</div>
                            <div><strong>Description:</strong> @orderItems.Product.Description</div>
                            <div><strong>Quantity:</strong> @orderItems.Quantity</div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>

}

<ConfirmDialog @ref="dialog" />

@code {
    [Inject]
    public IOrdersService orderService { get; set; } = default!;

    [Parameter]
    public OrderDto Order { get; set; } = default!;

    [Parameter]
    public EventCallback<bool> OnOrdercancelled { get; set; }

    public ConfirmDialog dialog = default!;

    private bool showDetails = false;

    private void ToggleDetails() => showDetails = !showDetails;

    private string? submitStatus;
    private string? alertClass;

    private async Task CancelOrder()
    {
        if (Order.OrderStatus.CurrentStatus == OrderStatusType.New)
        {
            var options = new ConfirmDialogOptions { IsVerticallyCentered = true };
            var confirmation = await dialog.ShowAsync(
                title: "Are you sure you want to cancle order?",
                message1: "Do you want to proceed?",
                confirmDialogOptions: options
        );

            if (confirmation)
            {
                bool success = await orderService.UpdateOrderStatus(Order.Id, OrderStatusType.Cancelled);

                if (success)
                {
                    submitStatus = "Order cancelled successfully!";
                    alertClass = "alert-success";
                    await OnOrdercancelled.InvokeAsync(true);
                }
                else
                {
                    submitStatus = "Order cancelled Failed!";
                    alertClass = "alert-danger";
                }
            }
        }
    }
}