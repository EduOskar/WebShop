@layout WareHouseLayout
@inject NavigationManager navigationManager
@page "/HandleOrder/{orderId:int}"

<AuthorizeView Roles="Warehouse Worker">
    <Authorized>

        <PageTitle>Stock Order</PageTitle>

        @if (currentOrder == null)
        {
            <DisplaySpinner />
        }
        else
        {
            <div class="order-container">
                <div class="order-header">
                    <h2>Order Details</h2>
                    <div class="order-info">
                        <p>Order ID: <span>@currentOrder!.Id</span></p>
                        <p>Placement Time: <span>@currentOrder.PlacementTime</span></p>
                        @if (currentOrder.OrderStatus is not null)
                        {
                            <p>Status: <span>@currentOrder.OrderStatus.CurrentStatus</span></p>
                            <p>Status Date: <span>@currentOrder.OrderStatus.StatusDate</span></p>
                        }
                    </div>
                </div>
                @if (currentOrder.OrderItems == null)
                {
                    <DisplaySpinner />
                }
                else
                {
                    <div class="order-products">
                        <h3>Products</h3>
                        @foreach (var item in currentOrder!.OrderItems)
                        {
                            <div class="product-item">
                                <p>Name: <span>@item.Product.Name</span></p>
                                <p>Quantity: <span>@item.Quantity</span></p>
                                <p>Quantity Check: <span>@item.QuantityCheck</span></p>
                            </div>
                        }
                    </div>
                }
              
        @if (currentOrder.OrderStatus?.CurrentStatus == OrderStatusType.New)
        {
            <button class="btn-finish" @onclick="() => UpdateOrderStatus(currentOrder.Id, currentOrder.OrderStatus.CurrentStatus)">Finnish packaging</button>
        }
            </div>
        }

        @if (submitStatus != null)
        {
            <div class="alert @alertClass" role="alert">
                @submitStatus
            </div>
        }

        <h4>Stock items in the Order</h4>

        @if (ProductList == null)
        {
            <DisplaySpinner />
        }
        else
        {
            var productCount = ProductList.Count();

            if (productCount > 0)
            {
                foreach (var productGroup in GetGroupedProductsByCategory())
                {
                    <h4>@GetCategoryName(productGroup)</h4>

                    <div class="row mt-3">
                        <WarehouseProductDisplay OnQuantityUpdate="OnQuantityUpdate" OrderItems="@currentOrder!.OrderItems" ProductList="@productGroup"></WarehouseProductDisplay>
                    </div>
                }
            }
        }
    </Authorized>
</AuthorizeView>




@code {
    [Inject]
    IOrdersService orderService { get; set; } = default!;

    [Inject]
    IOrderItemsService orderItemService { get; set; } = default!;

    [Inject]
    public IProductsService ProductService { get; set; } = default!;

    public List<ProductDto> ProductList { get; set; } = default!;

    public OrderItemDto OrderItem { get; set; } = default!;

    [SupplyParameterFromForm]
    public OrderDto currentOrder { get; set; } = new();

    [Parameter]
    public int? orderId { get; set; } = default!;

    private int selectOrderItemId;

    private int maxQuantity;

    private string? submitStatus;
    private string? alertClass;

    protected override async Task OnParametersSetAsync()
    {
        if (orderId is not null)
        {
            var order = await orderService.GetOrder(orderId.Value);

            ProductList = await ProductService.GetProducts();

            if (order is not null)
            {

                currentOrder.Id = order.Id;
                currentOrder.UserId = order.UserId;
                currentOrder.OrderStatus = order.OrderStatus;
                currentOrder.OrderItems = order.OrderItems;
                if (currentOrder.OrderItems != null && currentOrder.OrderItems.Any())
                {
                    maxQuantity = currentOrder.OrderItems.First().Quantity;
                    selectOrderItemId = currentOrder.OrderItems.First().Id;
                }
            }
        }
    }

    protected IOrderedEnumerable<IGrouping<int, ProductDto>> GetGroupedProductsByCategory()
    {
        return from product in ProductList
               where product.Status == ProductStatus.Active
               group product by product.CategoryId into prodByCatGroup
               orderby prodByCatGroup.Key
               select prodByCatGroup;
    }

    protected string GetCategoryName(IGrouping<int, ProductDto> groupedProductDto)
    {
        return groupedProductDto?.FirstOrDefault(pg => pg.CategoryId == groupedProductDto.Key)!.CategoryName!.Substring(0, 1)!;

    }

    protected async Task OnQuantityUpdate()
    {
        var order = await orderService.GetOrder(orderId!.Value);
        if (order is not null)
        {
            currentOrder.Id = order.Id;
            currentOrder.UserId = order.UserId;
            currentOrder.OrderItems = order.OrderItems;
            currentOrder.OrderItems = order.OrderItems;
        }
        StateHasChanged();
    }

    private async Task UpdateOrderStatus(int orderId, OrderStatusType newStatus)
    {
        newStatus = OrderStatusType.Sent;

        bool successResponse = await orderService.UpdateOrderStatus(orderId, newStatus);

        if (successResponse)
        {
            submitStatus = "status updated successfully!";
            alertClass = "alert-success";
            navigationManager.NavigateTo("YourOrders");
        }
        else
        {
            submitStatus = "status updated Failed!";
            alertClass = "alert-danger";
        }
    }
}