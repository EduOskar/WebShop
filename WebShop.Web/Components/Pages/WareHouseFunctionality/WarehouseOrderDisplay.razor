@inject NavigationManager navigationManager
@inject AuthenticationStateProvider authStateProvider

<AuthorizeView Roles="Warehouse Worker">
    <Authorized>
        @if (OrdersList == null)
        {
            <DisplaySpinner />
        }
        else
        {
            <div class="orders-container">
                @foreach (var order in OrdersList)
                {
                    <div class="order-card">
                        <div class="order-header">
                            <h5>Order ID: @order.Id</h5>
                            <span class="order-status">@order.OrderStatus.CurrentStatus</span>
                        </div>
                        <div class="order-details">
                            <p>Placed: @order.PlacementTime.ToString("g")</p>
                            <p>User ID: @order.UserId</p>
                            <p>Status Date: @order.OrderStatus.StatusDate.ToString("g")</p>
                            <p>Worker: @(order.WarehouseWorker?.FirstName ?? "Not assigned yet")</p>
                        </div>
                        <div class="order-actions">
                            @if (order.WareHouseWorkerId is null)
                            {
                                <a href="HandleOrder/@order.Id" class="btn btn-action" @onclick="() => AssinOrderToWorker(order.Id)">
                                    Pick Order to handle
                                </a>
                            }
                            else
                            {
                                <span>This Order is already Assigned</span>
                            }
                            @if (order.OrderStatus.CurrentStatus != OrderStatusType.New)
                            {
                                <div class="status-update">
                                  
                                    @if(order.OrderStatus.CurrentStatus != OrderStatusType.Cancelled)
                                    {
                                        <select @bind="order.OrderStatus.CurrentStatus" class="form-select">
                                            @foreach (var status in Enum.GetValues<OrderStatusType>())
                                            {
                                                <option value="@status">@status</option>
                                            }
                                        </select>
                                        <button class="btn btn-update" @onclick="() => UpdateOrderStatus(order.Id, order.OrderStatus.CurrentStatus)">Update Status</button>

                                    }
                                </div>
                            }
                        </div>
                        <div class="order-items">
                            @if (order.OrderItems.Any())
                            {
                                <h6>Products:</h6>
                                @foreach (var item in order.OrderItems)
                                {
                                    <p>@item.Product.Name - Qty: @item.Quantity (Checked: @item.QuantityCheck)</p>
                                }
                            }
                            else
                            {
                                <p>No items</p>
                            }
                        </div>
                    </div>
                }
                @if (submitStatus != null)
                {
                    <div class="alert @alertClass" role="alert">
                        @submitStatus
                    </div>
                }
            </div>
        }
    </Authorized>
</AuthorizeView>



@code {
    [Inject]
    private IOrdersService ordersService { get; set; } = default!;

    [Inject]
    private IOrderItemsService orderItemService { get; set; } = default!;

    [Parameter]
    public List<OrderDto> OrdersList { get; set; } = default!;

    [Parameter]
    public EventCallback<bool> OnStatusUpdated { get; set; }


    ClaimsPrincipal User = default!;
    public int UserId { get; set; }

    private string? submitStatus;
    private string? alertClass;


    private async Task UpdateOrderStatus(int orderId, OrderStatusType newStatus)
    {
        bool successResponse = await ordersService.UpdateOrderStatus(orderId, newStatus);

        if (successResponse)
        {
            submitStatus = "status updated successfully!";
            alertClass = "alert-success";
            await OnStatusUpdated.InvokeAsync(true);
        }
        else
        {
            submitStatus = "status updated Failed!";
            alertClass = "alert-danger";
        }
    }

    private async Task AssinOrderToWorker(int orderId)
    {
        var authstate = await authStateProvider.GetAuthenticationStateAsync();

        User = authstate.User;

        string userIdClaimValue = User.FindFirst(ClaimTypes.NameIdentifier)?.Value!;
        if (int.TryParse(userIdClaimValue, out int userId))
        {
            UserId = userId;
        }

        if (User != null && User.Identity!.IsAuthenticated)
        {
            var successResponse = await ordersService.AssignWorkerToOrder(UserId, orderId);

            if (successResponse)
            {
                submitStatus = "orderAssignment was Succesfull!";
                alertClass = "alert-success";
            }
            else
            {
                submitStatus = "Assignment of order has Failed. Contact support for help";
                alertClass = "alert-danger";
            }
        }

    }
}
