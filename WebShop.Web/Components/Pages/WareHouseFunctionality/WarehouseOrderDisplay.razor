@inject NavigationManager navigationManager
@inject AuthenticationStateProvider authStateProvider

@if (OrdersList == null)
{
    <DisplaySpinner />
}
else
{
    <div class="table-responsive">
        <table class="table table-hover">
            <thead class="thead-dark">
                <tr>
                    <th>Order ID</th>
                    <th>Placement Time</th>
                    <th>User ID</th>
                    <th>Order Status</th>
                    <th>Status Date</th>
                    <th>Update Status</th>
                    <th>Pick Order</th>
                    <th>Products</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var order in OrdersList)
                {
                    <tr>
                        <td>@order.Id</td>
                        <td>@order.PlacementTime</td>
                        <td>@order.UserId</td>
                        <td>@order.OrderStatus.CurrentStatus</td>
                        <td>@order.OrderStatus.StatusDate</td>
                        <td>
                            <a href="HandleOrder/@order.Id" class="btn btn-primary mt-2" @onclick="() => AssinOrderToWorker(order.Id)">
                                Pick Order to handle
                            </a>
                        </td>
                        <td>
                            @if (order.OrderStatus.CurrentStatus != OrderStatusType.New)
                            {
                                <select @bind="order.OrderStatus.CurrentStatus" class="form-control">
                                    @foreach (var status in Enum.GetValues<OrderStatusType>())
                                    {
                                        <option value="@status">@status</option>
                                    }
                                </select>
                                <button class="btn btn-primary mt-2" @onclick="() => UpdateOrderStatus(order.Id, order.OrderStatus.CurrentStatus)">Update Status</button>
                            }
                        </td>
                        <td>
                            @if (order.OrderItems.Any())
                            {@foreach (var item in order.OrderItems)
                                {
                                    <table class="table">
                                        <thead>
                                            <tr>
                                                <th>Name</th>
                                                <th>Quantity</th>
                                                <th>QuantityCheck</th>
                                            </tr>
                                        </thead>
                                        <tr>
                                            <td>@item.Product.Name</td>
                                            <td>@item.Quantity</td>
                                        </tr>
                                    </table>
                                }
                                @if (submitStatus != null)
                                {
                                    <div class="alert @alertClass" role="alert">
                                        @submitStatus
                                    </div>
                                }
                            }
                            else
                            {
                                <p>No items</p>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>


}

@code {
    [Inject]
    private IOrdersService ordersService { get; set; } = default!;

    [Inject]
    private IOrderItemsService orderItemService { get; set; } = default!;

    [Parameter]
    public List<OrderDto> OrdersList { get; set; } = default!;

    [Parameter]
    public EventCallback<bool> OnStatusUpdated { get; set; }


    ClaimsPrincipal User = default!;
    public int UserId { get; set; }

    private string? submitStatus;
    private string? alertClass;


    private async Task UpdateOrderStatus(int orderId, OrderStatusType newStatus)
    {
        bool successResponse = await ordersService.UpdateOrderStatus(orderId, newStatus);

        if (successResponse)
        {
            submitStatus = "status updated successfully!";
            alertClass = "alert-success";
            await OnStatusUpdated.InvokeAsync(true);
        }
        else
        {
            submitStatus = "status updated Failed!";
            alertClass = "alert-danger";
        }
    }

    private async Task AssinOrderToWorker(int orderId)
    {
        var authstate = await authStateProvider.GetAuthenticationStateAsync();

        User = authstate.User;

        string userIdClaimValue = User.FindFirst(ClaimTypes.NameIdentifier)?.Value!;
        if (int.TryParse(userIdClaimValue, out int userId))
        {
            UserId = userId;
        }

        if (User != null && User.Identity!.IsAuthenticated)
        {
            var successResponse = await ordersService.AssignWorkerToOrder(UserId, orderId);

            if (successResponse)
            {
                submitStatus = "orderAssignment was Succesfull!";
                alertClass = "alert-success";
            }
            else
            {
                submitStatus = "Assignment of order has Failed. Contact support for help";
                alertClass = "alert-danger";
            }
        }

    }
}
