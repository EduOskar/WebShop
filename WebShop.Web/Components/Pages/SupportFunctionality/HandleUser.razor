@page "/HandleUser/{UserId:int}/{SupportMailId:int}"
@inject NavigationManager NavigationManager
@inject ISupportService SupportService
@inject IUsersService UserService

<AuthorizeView Roles="Support">
    <Authorized>
        @if (UserId == 0 || SupportMailId == 0 || User == null || UserSupportMail == null)
        {
            <h5>Loading Information - <DisplaySpinner /> </h5>
        }
        else
        {
            <Card Class="col-md-2 align-content-between">
                <CardBody>
                    <CardTitle>@User.FirstName @User.LastName</CardTitle>
                    <CardSubTitle Class="mb-2 text-muted">@User.Email</CardSubTitle>
                    <CardSubTitle Class="mb-2 text-muted">@User.UserName</CardSubTitle>
                </CardBody>
            </Card>


            <div class="support-container" style="background-color: @(UserSupportMail.IsResolved == IsResolved.Resolved ? "green" : "red");">
                <button class="centered-button" @onclick="() => OpenMessageBoard(UserSupportMail)">Ticket @UserSupportMail.Id - Status: @(UserSupportMail.IsResolved == IsResolved.Resolved ? "Resolved" : "Active")</button>
            </div>

        }

        @if (OrderList == null || User == null)
        {
            <h5>@User!.Email Has no orders to display</h5>
        }
        else
        {
            <Card>
                <CardHeader>
                    <CardTitle>Here is card Title</CardTitle>
                </CardHeader>
                <CardBody>
                    <Grid TItem="OrderDto"
                          class="table table-hover table-bordered table-striped"
                          DataProvider="TicketDataProvider"
                          AllowFiltering="true"
                          AllowPaging="true"
                          PageSize="15"
                          ItemsPerPageText="1"
                          PageSizeSelectorItems="[1]"
                          PaginationItemsTextFormat="yes"
                          AllowSorting="true"
                          Responsive="true">
                        <GridColumn TItem="OrderDto" HeaderText="Id" IsDefaultSortColumn="true" PropertyName="Id" SortKeySelector="item => item.Id">
                            <ChildContent Context="item">
                                @item.Id
                            </ChildContent>
                        </GridColumn>
                        <GridColumn TItem="OrderDto" HeaderText="Order Status" IsDefaultSortColumn="true" PropertyName="OrderStatus" SortKeySelector="item => item.OrderStatus.CurrentStatus">
                            <ChildContent Context="item">
                                @item.OrderStatus.CurrentStatus
                            </ChildContent>
                        </GridColumn>
                        <GridColumn TItem="OrderDto" HeaderText="User Id" IsDefaultSortColumn="true" PropertyName="UserId" SortKeySelector="item => item.UserId">
                            <ChildContent Context="item">
                                @item.UserId
                            </ChildContent>
                        </GridColumn>
                        <GridColumn TItem="OrderDto" HeaderText="WareHouseWorker " IsDefaultSortColumn="true" PropertyName="WareHouseWorker" SortKeySelector="item => item.WareHouseWorkerId">
                            <ChildContent Context="item">
                                @if (item.WarehouseWorker == null)
                                {
                                    <p>No WarehouseWorker yet</p>
                                }
                                else
                                {
                                    @item.WareHouseWorkerId<br />
                                    @item.WarehouseWorker.FirstName <br />
                                    @item.WarehouseWorker.LastName
                                }
                              
                            </ChildContent>
                        </GridColumn>
                        <GridColumn TItem="OrderDto" HeaderText="Order Items" IsDefaultSortColumn="true" PropertyName="OrderItems">
                            <ChildContent Context="item">
                                @if (item.OrderItems != null)
                                {
                                    @foreach (var orderItem in item.OrderItems)
                                    {
                                        <p> @orderItem.ProductId : @orderItem.Product.Name<br /></p>
                                    }
                                }
                                else
                                {
                                   <p>No OrderItems</p>
                                }
                            </ChildContent>
                        </GridColumn>



                    </Grid>
                </CardBody>
            </Card>
        }

        @if (isMessageBoardOpen)
        {
            <div class="message-board-popup">
                <MessageBoard SupportMailId="@selectedSupportMailId" />
                <button @onclick="() => isMessageBoardOpen = false">Close</button>
            </div>
        }
    </Authorized>
</AuthorizeView>

@code {
    [Inject]
    IOrdersService OrderService { get; set; } = default!;

    [Parameter]
    public int? UserId { get; set; }

    [Parameter]
    public int? SupportMailId { get; set; }

    UserDto User { get; set; } = new();
    SupportMailDto UserSupportMail { get; set; } = default!;

    List<OrderDto>? OrderList { get; set; }

    private bool isMessageBoardOpen = false;
    private int selectedSupportMailId;

    protected override async Task OnParametersSetAsync()
    {
        if (UserId.HasValue)
        {
            User = await UserService.GetUser(UserId.Value);

            OrderList = await OrderService.GetOrdersFromUser(User.Id);
        }
        if (SupportMailId.HasValue)
        {
            UserSupportMail = await SupportService.GetSupportMail(SupportMailId.Value);
        }
    }

    private void OpenMessageBoard(SupportMailDto email)
    {
        selectedSupportMailId = email.Id;
        isMessageBoardOpen = true;
    }
    private async Task<GridDataProviderResult<OrderDto>> TicketDataProvider(GridDataProviderRequest<OrderDto> request)
    {
        return await Task.FromResult(request.ApplyTo(OrderList!));
    }
}