@page "/SupportDashboard"
@inject CustomStateProvider authenticationStateProvider
@inject NavigationManager navigationManager

<AuthorizeView Roles="Support">
    <Authorized>
        @if (AssignedSupportMails == null)
        {
            <a>Loading Tickets</a>
        }
        else
        {
            <Card>
                <CardHeader>
                    <CardTitle>Grid Title</CardTitle>
                </CardHeader>
                <CardBody>
                    <Grid TItem="SupportMailDto"
                          class="table table-hover table-bordered table-striped"
                          DataProvider="TicketDataProvider"
                          AllowFiltering="true"
                          AllowPaging="true"
                          PageSize="15"
                          ItemsPerPageText="1"
                          PageSizeSelectorItems="[1]"
                          PaginationItemsTextFormat="yes"
                          AllowSorting="true"
                          Responsive="true">
                        <GridColumn TItem="SupportMailDto" HeaderText="SupportWorker" IsDefaultSortColumn="true" PropertyName="SupportWorker" SortKeySelector="item => item.Support!.LastName">
                            <ChildContent Context="item">
                                @if (item.Support == null)
                                {
                                    <div><p>Ticket is not yet assigned</p></div>
                                }
                                else
                                {
                                    <a>@item.Support!.FirstName @item.Support.LastName</a>
                                }
                            </ChildContent>
                        </GridColumn>
                        <GridColumn TItem="SupportMailDto" HeaderText="Id" IsDefaultSortColumn="true" PropertyName="Id" SortKeySelector="item => item.Id">
                            <ChildContent Context="item">
                                @item.Id
                            </ChildContent>
                        </GridColumn>
                        <GridColumn TItem="SupportMailDto" HeaderText="First Name" PropertyName="FirstName" SortKeySelector="item => item.User!.FirstName">
                            <ChildContent Context="item">
                                @item.User!.FirstName
                            </ChildContent>
                        </GridColumn>
                        <GridColumn TItem="SupportMailDto" HeaderText="Last Name" PropertyName="LastName" SortKeySelector="item => item.User!.LastName">
                            <ChildContent Context="item">
                                @item.User!.LastName
                            </ChildContent>
                        </GridColumn>
                        <GridColumn TItem="SupportMailDto" HeaderText="Credit" PropertyName="Credit" SortKeySelector="item => item.User!.Credit">
                            <ChildContent Context="item">
                                @item.User!.Credit
                            </ChildContent>
                        </GridColumn>
                        <GridColumn TItem="SupportMailDto" HeaderText="Address" PropertyName="Adress" SortKeySelector="item => item.User!.Adress">
                            <ChildContent Context="item">
                                @item.User!.Adress
                            </ChildContent>
                        </GridColumn>
                        <GridColumn TItem="SupportMailDto" HeaderText="Username" PropertyName="UserName" SortKeySelector="item => item.User!.UserName">
                            <ChildContent Context="item">
                                @item.User!.UserName
                            </ChildContent>
                        </GridColumn>
                        <GridColumn TItem="SupportMailDto" HeaderText="Email" PropertyName="Email" SortKeySelector="item => item.User!.Email">
                            <ChildContent Context="item">
                                @item.User!.Email
                            </ChildContent>
                        </GridColumn>
                        <GridColumn TItem="SupportMailDto" HeaderText="Phone Number" PropertyName="Phonenumber" SortKeySelector="item => item.User!.Phonenumber">
                            <ChildContent Context="item">
                                @item.User!.Phonenumber
                            </ChildContent>
                        </GridColumn>
                        <GridColumn TItem="SupportMailDto" HeaderText="Ticket Active" PropertyName="ActiveSupportMailDisplay" SortKeySelector="item => item.IsAnswered">
                            <ChildContent Context="item">
                                @item.IsAnswered
                            </ChildContent>
                        </GridColumn>
                        <GridColumn TItem="SupportMailDto" HeaderText="Handle Ticket">
                            <ChildContent Context="item">
                                @if (item.IsAnswered == IsAnswered.NotAnswered)
                                {
                                    <Button @onclick="(() => HandleUserSupport(item))">Handle Ticket</Button>
                                }
                                else
                                {
                                    <Button @onclick="(() => HandleUserSupport(item))">Review Answered Ticket</Button>
                                }

                            </ChildContent>
                        </GridColumn>
                    </Grid>
                </CardBody>
            </Card>
        }

    </Authorized>
</AuthorizeView>

@code {
    [Inject]
    ISupportService SupportService { get; set; } = default!;

    [Inject]
    IUsersService UserService { get; set; } = default!;

    IEnumerable<SupportMailDto> SupportMailList { get; set; } = default!;

    IEnumerable<SupportMailDto> AssignedSupportMails { get; set; } = default!;

    UserDto Support { get; set; } = default!;

    public int supportId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();

        var user = authState.User;

        SupportMailList = await SupportService.GetSupportMails();

        string userIdClaimValue = user.FindFirst(ClaimTypes.NameIdentifier)?.Value!;
        if (int.TryParse(userIdClaimValue, out int userId))
        {
            supportId = userId;
        }

        AssignedSupportMails = SupportMailList
        .Where(sw => sw.SupportId == supportId);
    }

    private async Task<GridDataProviderResult<SupportMailDto>> TicketDataProvider(GridDataProviderRequest<SupportMailDto> request)
    {
        return await Task.FromResult(request.ApplyTo(AssignedSupportMails));
    }

    private void HandleUserSupport(SupportMailDto supportMail)
    {
        navigationManager.NavigateTo($"/HandleUser/{supportMail.UserId}");
    }

}
