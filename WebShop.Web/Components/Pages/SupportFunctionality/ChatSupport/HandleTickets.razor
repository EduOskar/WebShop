@page "/HandleTickets"
@inject NavigationManager navigationManager
@inject CustomStateProvider authenticationStateProvider


@if (UserList == null)
{
    <DisplaySpinner />
}
else
{
    <div class="ticket-handling-container">
    @*     <aside class="sidebar">
            <div class="filter-section">
                <!-- Example of a filter, adjust based on actual filtering logic -->
                <input class="filter-input" placeholder="Search tickets..." @oninput="ApplyFilters" />
                <!-- Add additional filters as needed -->
            </div>
        </aside> *@
        <main class="content">
            <AuthorizeView>
                <Authorized>
                    @if (UserList == null)
                    {
                        <DisplaySpinner />
                    }
                    else
                    {
                        <div class="tickets-grid">
                            @foreach (var ticket in SupportTickets)
                            {
                                <div class="ticket-card">
                                    <div class="ticket-info">
                                        <span class="info-label">Ticket ID:</span> @ticket.Id
                                        <span class="info-label">User:</span> @ticket.User!.FirstName @ticket.User.LastName
                                     
                                    </div>
                                    <div class="ticket-actions">
                                    
                                        <button class="action-button" @onclick="() => HandleUserSupport(ticket)">
                                            @(ticket.SupportId == null ? "Handle User" : "Join Support Chat")
                                        </button>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </Authorized>
            </AuthorizeView>
        </main>
    </div>
}

@code {
    [Inject]
    ISupportService SupportService { get; set; } = default!;

    [Inject]
    IUsersService UserService { get; set; } = default!;

    IEnumerable<MessageTicketDto> SupportTickets { get; set; } = default!;

    List<UserDto> UserList { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await FetchInformation();
    }

    protected async Task FetchInformation()
    {
        SupportTickets = await SupportService.GetMessageTickets();

        // SupportTickets = PreEditedMails.Where(x => x. == IsSupport.User);

        UserList = await UserService.GetUsers();

        StateHasChanged();
    }

    private async Task<GridDataProviderResult<MessageTicketDto>> UsersDataProvider(GridDataProviderRequest<MessageTicketDto> request)
    {
        return await Task.FromResult(request.ApplyTo(SupportTickets));
    }


    private async void HandleUserSupport(MessageTicketDto supportTicket)
    {
        int supportId = 0;

        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();

        if (authState is not null)
        {
            string userIdValue = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value!;
            if (int.TryParse(userIdValue, out supportId))
            {
                // supportId = userId;

            }

            var result = await SupportService.AssignSupportToTicket(supportTicket.Id, supportId);

            if (result)
            {
                var userId = supportTicket.UserID;
                navigationManager.NavigateTo($"/HandleUserTickets/{supportTicket.Id}");
            }

        }

    }
}
