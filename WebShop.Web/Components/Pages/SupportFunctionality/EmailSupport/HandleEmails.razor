@page "/HandleEmails"
@inject NavigationManager navigationManager
@inject CustomStateProvider authenticationStateProvider


@if (UserList == null)
{
    <DisplaySpinner />
}
else
{
    <div class="email-handling-container">
        <main class="content">
            <AuthorizeView>
                <Authorized>
                    @if (UserList == null)
                    {
                        <DisplaySpinner />
                    }
                    else
                    {
                        <div class="emails-grid">
                            @foreach (var email in SupportMails)
                            {
                                <div class="email-card">
                                    <div class="email-info">
                                        <div><span class="info-label">Email ID:</span> @email.Id</div>
                                        <div><span class="info-label">From:</span> @email.From</div>
                                        <div><span class="info-label">To:</span> @email.To</div>
                                        <div><span class="info-label">Subject:</span> @email.Subject</div>
                                    </div>
                                    <div class="email-actions">
                                        <button class="action-button" @onclick="() => HandleUserSupport(email)">
                                            Handle Email
                                        </button>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </Authorized>
            </AuthorizeView>
        </main>
    </div>
}

@code {
    [Inject]
    ISupportService SupportService { get; set; } = default!;

    [Inject]
    IUsersService UserService { get; set; } = default!;

    [Inject]
    IOrdersService OrderService { get; set; } = default!;

    IEnumerable<SupportMailDto> SupportMails { get; set; } = default!;

    List<UserDto> UserList { get; set; } = default!;

    List<OrderDto> OrderList { get; set; } = default!;



    protected override async Task OnInitializedAsync()
    {
        await FetchInformation();
    }

    protected async Task FetchInformation()
    {
        var PreEditedMails = await SupportService.GetSupportMails();

        SupportMails = PreEditedMails.Where(x => x.IsSupport == IsSupport.User);

        UserList = await UserService.GetUsers();

        OrderList = await OrderService.GetOrders();

        StateHasChanged();
    }

    private async Task<GridDataProviderResult<SupportMailDto>> UsersDataProvider(GridDataProviderRequest<SupportMailDto> request)
    {
        return await Task.FromResult(request.ApplyTo(SupportMails));
    }


    private async void HandleUserSupport(SupportMailDto supportmail)
    {
        int supportId = 0;
       
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();

        if (authState is not null)
        {
            string userIdValue = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value!;
            if (int.TryParse(userIdValue, out supportId))
            {
                // supportId = userId;

            }

            var result = await SupportService.AssignSupportToEmail(supportmail.Id, supportId);

            if (result)
            {
                var userId = supportmail.UserId;
                navigationManager.NavigateTo($"/HandleUser/{userId}");
            }

        }
      
    }
}
