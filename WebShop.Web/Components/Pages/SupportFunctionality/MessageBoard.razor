<AuthorizeView Roles="Support">
    <Authorized>
        @if (messages == null || SupportMail == null)
        {
            <p>Loading messages...</p>
        }
        else
        {
            <div class="supportMail-container">
                <div>@SupportMail.To</div>
                <div>@SupportMail.Subject</div>
                <div>@SupportMail.Body</div>
            </div>
            <br />
            foreach (var message in messages)
            {
                <div class="message-container">
                    <div>@context.User.Identity!.Name: @message.Message </div>
                    <div class="timestamp"><a>@message.CreatedAt.ToString("h:mm tt")</a></div>
                </div>
            }
            <textarea @bind="newMessage"></textarea>
            <button @onclick="SendMessage">Send</button>
        }
    </Authorized>
</AuthorizeView>


@code {

    [Inject]
    ISupportService SupportService { get; set; } = default!;

    [Parameter]
    public int SupportMailId { get; set; }

    private SupportMailDto SupportMail { get; set; } = default!;

    private List<SupportMessagesDto> messages { get; set; } = default!;

    private string newMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        SupportMail = await SupportService.GetSupportMail(SupportMailId);

        messages = await SupportService.GetSupportMessagesForMail(SupportMailId);
    }

    private async Task SendMessage()
    {
        await SupportService.AddSupportMessage(this.SupportMailId, new SupportMessagesDto { SupportMailId = this.SupportMailId, Message = newMessage, UserName = "Ina", CreatedAt = DateTime.UtcNow });
        newMessage = "";
        messages = await SupportService.GetSupportMessagesForMail(SupportMailId); 
    }
}