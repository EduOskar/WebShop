<AuthorizeView Roles="Support">
    <Authorized>
        @if (SupportMail == null || SupportMail.User == null)
        {
            <p>Loading messages...</p>
        }
        else
        {
            <div class="supportMail-container">
                <div>@SupportMail.To</div>
                <div>@SupportMail.Subject</div>
                <div>@SupportMail.Body</div>
            </div>
            <br />
            <button @onclick="SendEmail">Send</button>


            <Card>
                <CardHeader>
                    <p>Respond to: @SupportMail!.User!.Email</p>
                    <p>Title: @SupportMail.Subject</p>
                    <p>Title: @SupportMail.Body</p>
                </CardHeader>
                <CardBody>

                </CardBody>
            </Card>
        }
    </Authorized>
</AuthorizeView>





@code {

    [Inject]
    ISupportService SupportService { get; set; } = default!;

    [Parameter]
    public int SupportMailId { get; set; }

    private SupportMailDto SupportMail { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        SupportMail = await SupportService.GetSupportMail(SupportMailId);
    }

    private async Task SendEmail() 
    {
        // var result = await SupportService.CreateSupportMail();
         await SupportService.GetSupportMessagesForMail(SupportMailId); 
    }
}