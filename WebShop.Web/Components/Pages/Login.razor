@page "/"
@inject NavigationManager navigationManager
@inject CustomStateProvider authStateProvider

<AuthorizeView>
    <Authorized>
        <h3>You have already logged in</h3>
    </Authorized>
    <NotAuthorized Context="Herpaderpa">
        <div class="row align-content-center">
            <div class="col-6">
                <h1 class="h2 font-weight-normal login-title">
                    Login
                </h1>
                <EditForm class="form-signin" OnValidSubmit="OnSubmit" Model="loginRequest">
                    <DataAnnotationsValidator />
                    <label for="inputUsername" class="sr-only">User Name</label>
                    <InputText id="inputUsername" class="form-control" @bind-Value="loginRequest.UserName" autofocus placeholder="Username" />
                    <ValidationMessage For="@(() => loginRequest.UserName)" />
                    <label for="inputPassword" class="sr-only">Password</label>
                    <InputText type="password" id="inputPassword" class="form-control" placeholder="Password" @bind-Value="loginRequest.Password" />
                    <ValidationMessage For="@(() => loginRequest.Password)" />
                    <div class="form-check m-3">
                        <InputCheckbox id="inputRememberMe" class="form-check-input" @bind-Value="@loginRequest.RememberMe" />
                        <label class="form-check-label" for="inputRememberMe">Remember Me</label>
                    </div>
                    <button class="btn btn-lg btn-primary btn-block" type="submit">Sign in</button>
                    <label class="text-danger">@error</label>

                    <NavLink href="register">
                        <h6 class="font-weight-normal text-center">Create account</h6>
                    </NavLink>

                </EditForm>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {

    LoginRequest loginRequest { get; set; } = new LoginRequest();

    private ClaimsPrincipal UserClaims { get; set; } = default!;

    string? error { get; set; }

    async Task OnSubmit()
    {
        error = null;
        try
        {
            await authStateProvider.Login(loginRequest);

            var authResult = await authStateProvider.GetAuthenticationStateAsync();

            if (authResult.User.IsInRole("Warehouse Worker"))
            {
                navigationManager.NavigateTo("/warehouse");
            }
            else
            {
                navigationManager.NavigateTo("/products");
            }
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }
}