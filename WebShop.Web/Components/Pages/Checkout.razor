@page "/Checkout"
@inject NavigationManager navigationManager
@inject CustomStateProvider authenticationStateProvider

@if (UserInfo == null || ShoppingCartItems == null)
{
    <DisplaySpinner />
}
else
{
    <div class="container-fluid">
        <div class="row">
            <div class="col-lg-6 checkout-form-container">
                <Card Class="custom-checkout-card">
                    <CardHeader Class="custom-card-header">
                        Checkout Information
                    </CardHeader>
                    <CardBody Class="custom-card-body">
                        <EditForm Model="@CheckoutModel" OnValidSubmit="OnSubmit">
                            <DataAnnotationsValidator />
                            <div class="form-field">
                                <label for="firstName">First Name:</label>
                                <InputText id="firstName" class="input-text" @bind-Value="CheckoutModel.FirstName" readonly/>
                                <ValidationMessage For="@(() => CheckoutModel.FirstName)" />
                            </div>
                            <div class="form-field">
                                <label for="lastName">Last Name:</label>
                                <InputText id="lastName" class="input-text" @bind-Value="CheckoutModel.LastName" readonly="readonly" />
                                <ValidationMessage For="@(() => CheckoutModel.LastName)" />
                            </div>
                            <div class="form-field">
                                <label for="phoneNumber">Phone Number:</label>
                                <InputText id="phoneNumber" class="input-text" @bind-Value="CheckoutModel.PhoneNumber" readonly="readonly" />
                                <ValidationMessage For="@(() => CheckoutModel.PhoneNumber)" />
                            </div>
                            <div class="form-field">
                                <label for="email">Email:</label>
                                <InputText id="email" class="input-text" @bind-Value="CheckoutModel.Email" readonly="readonly" />
                                <ValidationMessage For="@(() => CheckoutModel.Email)" />
                            </div>
                            <div class="form-field">
                                <label for="city">City:</label>
                                <InputText id="city" class="input-text" @bind-Value="CheckoutModel.City" />
                                <ValidationMessage For="@(() => CheckoutModel.City)" />
                            </div>
                            <div class="form-field">
                                <label for="adressLine">Address Line:</label>
                                <InputText id="adressLine" class="input-text" @bind-Value="CheckoutModel.AdressLine" />
                                <ValidationMessage For="@(() => CheckoutModel.AdressLine)" />
                            </div>
                            <div class="form-field">
                                <label for="postCode">Post Code:</label>
                                <InputText id="postCode" class="input-text" @bind-Value="CheckoutModel.PostCode" />
                                <ValidationMessage For="@(() => CheckoutModel.PostCode)" />
                            </div>
                            <button class="submit-button" type="submit">Purchase products</button>
                        </EditForm>
                    </CardBody>
                </Card>
            </div>


            <div class="col-lg-6 checkout-summary-container">
                <Card Class="checkout-card">
                    <CardHeader Class="checkout-card-header">
                        Payment Summary
                    </CardHeader>
                    <CardBody Class="checkout-card-body">
                        @if (ShoppingCartItems.Count() > 0)
                        {
                            <table class="checkout-summary-table">
                                <thead>
                                    <tr>
                                        <th class="product-header">Product</th>
                                        <th class="price-header">Price</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in ShoppingCartItems)
                                    {
                                        <tr class="product-row">
                                            <td><img class="img-thumbnail" src="@item.Product!.ImageURL" /></td>
                                            <td class="product-name">@item.Quantity x @item.ProductName</td>
                                            @if (item.Product!.DiscountedPrice > 0 || item.Product.DiscountedPrice != null)
                                            {
                                                <td class="product-price">@item.Product.DiscountedPrice.ToString()</td>
                                            }
                                            else
                                            {
                                                <td class="product-price">@item.Product.Price.ToString("C")</td>
                                            }
                                        </tr>
                                    }
                                    <tr class="total-row">
                                        <td class="total-label"><b>Total</b></td>
                                        <td class="total-amount"><b>@PaymentAmount.ToString("C")</b></td>
                                    </tr>
                                </tbody>
                            </table>
                        }
                        else
                        {
                            <div class="checkout-no-items">You currently have no items in your shopping cart.</div>
                        }
                    </CardBody>
                    <Card Class="checkout-card">
                        <CardHeader Class="checkout-card-header">
                            Apply Discount
                        </CardHeader>
                        <CardBody Class="checkout-card-body">
                            <EditForm Model="this" OnValidSubmit="HandleApplyDiscount">
                                <div class="checkout-form-group">
                                    <label for="discountCode">Discount Code:</label>
                                    <InputText id="discountCode" class="checkout-form-control" @bind-Value="discountCode" />
                                </div>
                                <button type="submit" class="submit-button">Apply Discount</button>
                            </EditForm>
                        </CardBody>
                        <DisplayError ErrorMessage="@ErrorMessage" />
                    </Card>
                </Card>


            </div>
        </div>
    </div>
}

@code {
    [Inject]
    ICartOrderTransferService CartOrderTransferService { get; set; } = default!;

    [Inject]
    IUsersService userService { get; set; } = default!;

    [Inject]
    ICartItemsService CartItemService { get; set; } = default!;

    [Inject]
    IDiscountService DiscountService { get; set; } = default!;

    [Inject]
    private ICartsService CartsService { get; set; } = default!;

    public string? CheckoutMessage = "";

    public string? ErrorMessage { get; set; }

    [Inject]
    DiscountCodeState discountCodeState { get; set; } = default!;

    protected List<CartItemDto> ShoppingCartItems { get; set; } = default!;

    CheckoutDto CheckoutModel = new();

    private ClaimsPrincipal User = default!;

    private UserDto UserInfo = default!;

    private CartDto cart = default!;

    string? error { get; set; }

    public string discountCode = default!;

    private int UserId;

    protected int TotalQuantity { get; set; } = default!;

    protected decimal PaymentAmount { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await GetAuthenticatedUserCart();

            ShoppingCartItems = await CartItemService.GetCartItems(UserId);

            PaymentAmount = ShoppingCartItems.Sum(item =>
            {
                var priceToUse = item.Product!.DiscountedPrice.HasValue ? item.Product.DiscountedPrice.Value : item.Product.Price;

                return priceToUse * item.Quantity;
            });

            TotalQuantity = ShoppingCartItems.Sum(p => p.Quantity);

        }
        catch (Exception)
        {

            throw;
        }
    }

    protected void OnSubmit()
    {
        navigationManager.NavigateTo("/CheckoutSuccess");
    }

    protected async Task GetAuthenticatedUserCart()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();

        User = authState.User;

        if (!User.Identity!.IsAuthenticated)
        {
            navigationManager.NavigateTo("");
        }

        string userIdClaimValue = User.FindFirst(ClaimTypes.NameIdentifier)?.Value!;
        if (int.TryParse(userIdClaimValue, out int userId))
        {
            UserId = userId;
        }

        if (User.Identity!.IsAuthenticated)
        {
            cart = await CartsService.GetCartByUser(UserId);
            UserInfo = await userService.GetUser(UserId);

            CheckoutModel.FirstName = UserInfo.FirstName;
            CheckoutModel.LastName = UserInfo.LastName;
            CheckoutModel.PhoneNumber = UserInfo.Phonenumber;
            CheckoutModel.Email = UserInfo.Email;
        }
    }

    private List<CartItemDto> GetCartItems(int userId)
    {

        var cartItems = ShoppingCartItems
        .Where(ci => ci.Id == cart.UserId)
        .ToList();

        return cartItems!;
    }

    private async Task HandleApplyDiscount()
    {
        if (!string.IsNullOrWhiteSpace(discountCode))
        {
            try
            {
                var result = await DiscountService.ApplyDiscount(UserId, discountCode);

                var discount = await DiscountService.GetDiscount(discountCode);

                discountCodeState.DiscountCode = discount.DiscountCode!;

                PaymentAmount = PaymentAmount * discount.DiscountPercentage;

                foreach (var item in ShoppingCartItems)
                {
                    item.Product!.Price = item.Product.Price * discount.DiscountPercentage;
                }

                ErrorMessage = "";

                StateHasChanged();

            }
            catch (Exception)
            {

                ErrorMessage = "Discount cannot be applied: either it's invalid, expired, or already used.";
            }
            discountCode = "";
            StateHasChanged();
        }
    }

    private void CartChanged()
    {
        CartItemService.RaiseEventOnShoppingCartChanged(TotalQuantity);
    }
}
