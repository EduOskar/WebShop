@page "/Checkout"
@inject NavigationManager navigationManager
@inject CustomStateProvider authenticationStateProvider

@if (User.Identity!.IsAuthenticated)
{
    <EditForm Model="Command" method="post" OnValidSubmit="SubmitOrder"></EditForm>
}

@if (ShoppingCartItems == null)
{
    <DisplaySpinner />
}
else
{
    <section class="container-fluid">
        <div class="col-md-6">
            <h4 class="mb-2">Payment Summary</h4>
            @if (ShoppingCartItems.Count() > 0)
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th>Product</th>
                            <th>Price</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in ShoppingCartItems)
                        {
                            <tr>
                                <td>@item.Qty x @item.ProductName</td>
                                <td>@item.TotalPrice.ToString("C")</td>
                            </tr>
                        }
                        <tr>
                            <td><b>Total </b></td>
                            <td><b></b>@PaymentAmount.ToString("C")</td>
                        </tr>
                    </tbody>
                </table>
            }
            else
            {
                <p>You currently have no items in your shopping cart</p>
            }
        </div>
    </section>
}



@code {
    [Inject]
    ICartOrderTransferService CartOrderTransferService { get; set; } = default!;

    [Inject]
    ICartItemsService CartItemService { get; set; } = default!;

    [Inject]
    private ICartsService CartsService { get; set; } = default!;

    [Inject]
    IOrdersService OrderService { get; set; } = default!;

    [Inject]
    IOrderItemsService OrderItemsService { get; set; } = default!;

    [Inject]
    IProductsService ProductsService { get; set; } = default!;

    protected List<CartItemDto> ShoppingCartItems { get; set; } = default!;

    private ClaimsPrincipal User = default!;

    private CartDto cart = default!;

    [SupplyParameterFromForm]
    private PlaceOrderCommand? Command { get; set; }

    private int UserId;

    protected int TotalQuantity { get; set; } = default!;

    protected string PaymentDescription { get; set; } = default!;

    protected decimal PaymentAmount { get; set; }

    protected bool PaymentSuccessfull { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await GetAuthenticatedUserCart();

            ShoppingCartItems = await CartItemService.GetCartItems(UserId);

            if (ShoppingCartItems != null)
            {
                Guid orderGuid = Guid.NewGuid();
                PaymentAmount = ShoppingCartItems.Sum(p => p.TotalPrice);
                TotalQuantity = ShoppingCartItems.Sum(p => p.Qty);
                PaymentDescription = $"O_{UserId}_{orderGuid}";
            }

        }
        catch (Exception)
        {

            throw;
        }
    }


    protected async Task GetAuthenticatedUserCart()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();

        User = authState.User;

        if (!User.Identity!.IsAuthenticated)
        {
            navigationManager.NavigateTo("");
        }

        string userIdClaimValue = User.FindFirst(ClaimTypes.NameIdentifier)?.Value!;
        if (int.TryParse(userIdClaimValue, out int userId))
        {
            UserId = userId;
        }

        if (User.Identity!.IsAuthenticated)
        {
            cart = await CartsService.GetCartByUser(UserId);
        }
    }

    private List<CartItemDto> GetCartItems(int userId)
    {

        var cartItems = ShoppingCartItems
        .Where(ci => ci.Id == cart.UserId)
        .ToList();

        return cartItems!;
    }

    private void CartChanged()
    {
        CartItemService.RaiseEventOnShoppingCartChanged(TotalQuantity);
    }
}
