@page "/Checkout"
@inject IJSRuntime js

<div class="container-md" style="background-color:plum">
    <div class="row">
        <h3 class="col-mb-5 mx-auto">Checkout</h3>
        <div class="row">
            <div class="col-md-6">
                <div class="col-md-6">
                    <h4 class="mb-2">Payment Method</h4>
                    <div id="smart-button-container">
                        <input type="hidden" name="descriptionInput" id="description" @bind="PaymentDescription" />
                        <input name="amountInput" type="hidden" id="amount" @bind="PaymentAmount">
                        <div style="text-align: center; margin-top: 0.625rem;" id="paypal-button-container"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@if (ShoppingCartItems == null)
{
    <DisplaySpinner />
}
else
{
    <section class="container"  style="background-color:mediumpurple">
        <div class="col-md-6 offset-md-6 ">
            <h4 class="mb-2">Payment Summary</h4>
            @if (ShoppingCartItems.Count() > 0)
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th>Product</th>
                            <th>Price</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in ShoppingCartItems)
                        {
                            <tr>

                                <td>@item.Qty x @item.ProductName</td>
                                <td>@item.TotalPrice.ToString("C")</td>
                            </tr>
                        }
                        <tr>
                            <td><b>Total </b></td>
                            <td><b></b>@PaymentAmount.ToString("C")</td>
                        </tr>
                    </tbody>
                </table>
            }
            else
            {
                <p>You currently have no items in your shopping cart</p>
            }
        </div>
    </section>
}

@code {

    protected List<CartItemDto> ShoppingCartItems { get; set; } = default!;

    protected int TotalQuantity { get; set; } = default!;

    protected string PaymentDescription { get; set; } = default!;

    protected decimal PaymentAmount { get; set; }

    protected bool PaymentSuccessfull { get; set; }

    [Inject]
    ICartOrderTransferService CartOrderTransferService { get; set; } = default!;

    [Inject]
    ICartItemsService CartItemService { get; set; } = default!;

    [Inject]
    IOrdersService OrderService { get; set; } = default!;

    [Inject]
    IOrderItemsService OrderItemsService { get; set; } = default!;

    [Inject]
    IProductsService ProductsService { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        try
        {

            ShoppingCartItems = await CartItemService.GetCartItems(HardCoded.UserId);

            await CartOrderTransfer(HardCoded.UserId);

            if (ShoppingCartItems != null)
            {
                Guid orderGuid = Guid.NewGuid();
                PaymentAmount = ShoppingCartItems.Sum(p => p.TotalPrice);
                TotalQuantity = ShoppingCartItems.Sum(p => p.Qty);
                PaymentDescription = $"O_{HardCoded.UserId}_{orderGuid}";
            }

        } 
        catch (Exception)
        {

            throw;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                await initiatePaypalButton();
            }
        }
        catch (Exception)
        {

            throw;
        }
    }

    private async Task initiatePaypalButton()
    {
        await js.InvokeVoidAsync("initiatePayPalButton");
    }

    private List<CartItemDto> GetCartItems(int userId)
    {
        var cartItems = ShoppingCartItems
        .Where(ci => ci.Id == HardCoded.CartId)
        .ToList();

        return cartItems!;
    }

    protected async Task CartOrderTransfer(int userId)
    {
        await CartOrderTransferService.CartOrderTransfer(HardCoded.UserId);
    }

    protected async Task DeleteAllCartItems(int cartItemId)
    {
        var cartItemDelete = await CartItemService.DeleteCartItem(cartItemId);
    }

    private void CartChanged()
    {
        CartItemService.RaiseEventOnShoppingCartChanged(TotalQuantity);
    }
}
