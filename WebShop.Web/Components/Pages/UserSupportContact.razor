@page "/UserSupportContact"
@inject CustomStateProvider authenticationStateProvider
@inject ISupportService SupportService
@inject IUsersService UserService

@if (User == null)
{
    <h5>Not logged in</h5>
}
else
{
    <div class="container mt-5">
        <div class="row justify-content-center">
            <div class="col-md-8">
                <div class="card">
                    <div class="card-header">
                        <h5>Contact Support</h5>
                    </div>
                    <div class="card-body">
                        <EditForm Model="SupportMail" OnValidSubmit="HandleValidSubmit">
                            <div class="mb-3">
                                <label for="From" class="form-label">From</label>
                                <input type="text" class="form-control" id="From" value="@User.Email" readonly>
                            </div>
                            <div class="mb-3">
                                <label for="To" class="form-label">To</label>
                                <InputText class="form-control" id="to" @bind-Value="SupportMail.To" readonly />
                            </div>
                            <div class="mb-3">
                                <label for="Subject" class="form-label">Subject</label>
                                <InputText class="form-control" id="subject" @bind-Value="SupportMail.Subject" />
                            </div>
                            <div class="mb-3">
                                <label for="Body" class="form-label">Body</label>
                                <InputTextArea class="form-control" id="Body" @bind-Value="SupportMail.Body" />
                            </div>
                            <button type="submit" class="btn btn-primary">Send</button>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (SupportMail.Id != 0)
    {
        <div class="Chathub-container">
            <ChatHub />
        </div>
    }
}

@code {
    UserDto User { get; set; } = default!;
    SupportMailDto SupportMail { get; set; } = new SupportMailDto { To = "Support@Consid.com" };
    string? message { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        string userIdValue = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value!;
        if (int.TryParse(userIdValue, out int userId))
        {
            User = await UserService.GetUser(userId);
        }
    }

    private async Task HandleValidSubmit()
    {
        SupportMail.UserId = User.Id;
        SupportMail.From = User.Email;

        var result = await SupportService.CreateSupportMail(SupportMail);
        if (result != null)
        {
            SupportMail = result; // Assuming CreateSupportMail returns the created object with Id
            message = "Succeeded to create support mail.";
        }
        else
        {
            message = "Failed to create support mail.";
        }
    }
}