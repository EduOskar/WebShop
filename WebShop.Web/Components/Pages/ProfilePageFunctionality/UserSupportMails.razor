@page "/usertickets"
@inject CustomStateProvider authenticationStateProvider
@inject NavigationManager NavigationManager
@inject ISupportService SupportService
@inject IUsersService UserService


<AuthorizeView>
    <Authorized Context="Ababa">
        @if (User == null || SupportMails == null)
        {
            <h5>Loading Information - <DisplaySpinner /> </h5>
        }
        else
        {
            <Card Class="col-md-2 align-content-between">
                <CardBody>
                    <CardTitle>@User.FirstName @User.LastName</CardTitle>
                    <CardSubTitle Class="mb-2 text-muted">@User.Email</CardSubTitle>
                    <CardSubTitle Class="mb-2 text-muted">@User.UserName</CardSubTitle>
                </CardBody>
            </Card>

            @foreach (var supportMail in SupportMails)
            {

                @if (supportMail.IsSupport == IsSupport.Support)
                {
                    <div class="support-container" style="background-color: @(supportMail.IsAnswered == IsAnswered.NotAnswered ? "green" : "red");">
                        <button class="centered-button" @onclick="() => OpenMessageBoard(supportMail)">
                            UserStatus: @supportMail.IsSupport   Ticket @supportMail.Id - Status: @(supportMail.IsAnswered == IsAnswered.Answered ? "Answered" : "NotAnswered")
                        </button>
                    </div>
                }
                <div class="text-container" style="display: block;">
                    <div>
                        From: @supportMail.From
                    </div>
                    <div>
                        To: @supportMail.To
                    </div>
                    <div class="email-subject">
                        Subject: @supportMail.Subject
                    </div>
                    <div class="email-body">
                        Body: @supportMail.Body
                    </div>
                    <div>
                        Date: @supportMail.DateTime
                    </div>
                </div>

                if (supportMail.IsSupport == IsSupport.Support && supportMail.IsAnswered == IsAnswered.NotAnswered)
                {
                    <div class="container mt-5">
                        <div class="row justify-content-center">
                            <div class="col-md-8">
                                <div class="card">
                                    <div class="card-header">
                                        <h5>Respond to : @User.Email</h5>
                                    </div>
                                    <div class="card-body">
                                        <EditForm Model="SupportMailCreate" OnValidSubmit="() => HandleValidSubmit(supportMail)">
                                            <div class="mb-3">
                                                <label for="From" class="form-label">From</label>
                                                <input type="text" class="form-control" id="From" value="Support@Consid.com" readonly>
                                            </div>
                                            <div class="mb-3">
                                                <label for="To" class="form-label">To</label>
                                                <InputText class="form-control" id="to" @bind-Value="@User.Email" readonly />
                                            </div>
                                            <div class="mb-3">
                                                <label for="Subject" class="form-label">Subject</label>
                                                <InputText class="form-control" id="subject" @bind-Value="supportMail.Subject" readonly />
                                            </div>
                                            <div class="mb-3">
                                                <label for="Body" class="form-label">Body</label>
                                                <InputTextArea class="form-control" id="Body" @bind-Value="SupportMailCreate.Body" />
                                            </div>
                                            <button type="submit" class="btn btn-primary">Send</button>
                                        </EditForm>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }

        }
    </Authorized>
</AuthorizeView>


@code {
    [Inject]
    IOrdersService OrderService { get; set; } = default!;

    UserDto User { get; set; } = new();
    IEnumerable<SupportMailDto> SupportMails { get; set; } = default!;

    SupportMailDto SupportMailCreate { get; set; } = new();

    List<OrderDto>? OrderList { get; set; }

    private int? selectedMailId = null;

    protected override async Task OnInitializedAsync()
    {

        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();

        if (authState is not null)
        {
            string userIdValue = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value!;
            if (int.TryParse(userIdValue, out int Id))
            {
                User = await UserService.GetUser(Id);

                SupportMails = await SupportService.GetUsersSupportMail(Id);

            }
        }

    }

    private void OpenMessageBoard(SupportMailDto supportMail)
    {
        selectedMailId = selectedMailId == supportMail.Id ? (int?)null : supportMail.Id;
    }

    private async Task HandleValidSubmit(SupportMailDto supportMail)
    {
        SupportMailCreate.UserId = User.Id;
        SupportMailCreate.From = User.Email;
        SupportMailCreate.To = "Support@Consid.com";
        SupportMailCreate.Subject = supportMail.Subject;
        SupportMailCreate.IsAnswered = supportMail.IsAnswered = IsAnswered.NotAnswered;
        SupportMailCreate.IsSupport = IsSupport.User;

        var result = await SupportService.CreateSupportMail(SupportMailCreate);
        if (result != null)
        {

            await SupportService.UpdateSupportMail(supportMail.Id);
            SupportMails = await SupportService.GetUsersSupportMail(supportMail.UserId);
            StateHasChanged();

        }
        else
        {
            // message = "Failed to create support mail.";
        }
    }

    private async Task<GridDataProviderResult<OrderDto>> TicketDataProvider(GridDataProviderRequest<OrderDto> request)
    {
        return await Task.FromResult(request.ApplyTo(OrderList!));
    }
}