@page "/chat"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@inject CustomStateProvider authenticationStateProvider
@implements IAsyncDisposable

<AuthorizeView>
    <Authorized>

        <div class="chat-container">
            <h3 class="chat-title">Support Chat</h3>
            <div class="support-id-container">
                Support ID: <input class="support-id-input" type="number" @bind="ticketId" readonly="readonly" />
            </div>
            <div class="user-container">
                User: <input class="user-input" type="text" @bind="User.UserName" readonly="readonly" />
            </div>
            <div class="message-container">
                Message: <input class="message-input" type="text" @bind="messageInput" />
                <button class="send-message-button" @onclick="SendMessageToGroup">Send</button>
            </div>

            @if (messages.Any())
            {
                <div class="messages-display">
                    @foreach (var message in messages)
                    {
                        <p class="message">@message.UserName: @message.CreatedAt : @message.Message</p>
                    }
                </div>
            }
        </div>

    </Authorized>
</AuthorizeView>

@code {
    [Inject]
    protected ISupportService SupportService { get; set; } = default!;

    CurrentUser User { get; set; } = default!;

    private HubConnection? hubConnection;
    private List<SupportMessagesDto> messages { get; set; } = new List<SupportMessagesDto>();

    [Parameter]
    public int ticketId { get; set; }

    private string? messageInput;
    private string? user;

    protected override async Task OnInitializedAsync()
    {
        var authstate = await authenticationStateProvider.GetCurrentUser();

        if (authstate != null)
        {
            User = authstate;
        }

        var supportmessages = await SupportService.GetSupportMessageByTicket(ticketId);

        messages = supportmessages ?? new List<SupportMessagesDto>();

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            messages!.Add(new SupportMessagesDto { UserName = user, Message = message, CreatedAt = DateTime.UtcNow });
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();

        await JoinGroup();
    }

    private async Task JoinGroup()
    {
        if (hubConnection is not null)
        {

            await hubConnection.SendAsync("JoinGroup", ticketId);
            messages.Add(new SupportMessagesDto { UserName = user!, Message = $"{User.UserName}: successfully joined chat", CreatedAt = DateTime.UtcNow });
        }
    }

    private async Task SendMessageToGroup()
    {
        if (hubConnection is not null && !string.IsNullOrWhiteSpace(messageInput))
        {
            user = User.UserName;
            await hubConnection.SendAsync("SendMessageToGroup", ticketId, user, messageInput);
            messageInput = string.Empty;
        }
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
