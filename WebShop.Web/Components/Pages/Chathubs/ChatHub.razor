@page "/chat"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@inject CustomStateProvider authenticationStateProvider
@implements IAsyncDisposable

<AuthorizeView>
    <Authorized>
        <h3>Support Chat</h3>
        <div>
            Support ID: <input type="number" @bind="supportMailId" />
            <button @onclick="JoinGroup">Join Session</button>
        </div>
        <div>
            User: <input type="text" @bind="User.UserName" readonly="readonly"/>
        </div>
        <div>
            Message: <input type="text" @bind="messageInput" />
            <button @onclick="SendMessageToGroup">Send</button>
        </div>

        @if (messages.Any())
        {
            foreach (var message in messages)
            {
                <p>@message.UserName: @message.CreatedAt : @message.Message</p>
            }
        }
    </Authorized>
</AuthorizeView>

@code {
    CurrentUser User { get; set; } = default!;

    private HubConnection? hubConnection;
    private List<SupportMessagesDto> messages = new List<SupportMessagesDto>();
    private int supportMailId;
    private string? messageInput;
    private string? user;

    protected override async Task OnInitializedAsync()
    {
        var authstate = await authenticationStateProvider.GetCurrentUser();

        if (authstate != null)
        {
            User = authstate;
        }

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        { 
            // var formattedMEssage = $"{} {user}: {message}";

            messages.Add(new SupportMessagesDto { UserName = user, Message = message, CreatedAt = DateTime.UtcNow});
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task JoinGroup()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("JoinGroup", supportMailId);
        }
    }

    private async Task SendMessageToGroup()
    {
        if (hubConnection is not null && !string.IsNullOrWhiteSpace(messageInput))
        {
             user = User.UserName;
            await hubConnection.SendAsync("SendMessageToGroup", supportMailId, user, messageInput);
            messageInput = string.Empty; 
        }
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
