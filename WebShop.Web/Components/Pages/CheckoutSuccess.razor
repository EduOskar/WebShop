@page "/CheckoutSuccess"
@inject CustomStateProvider authenticationStateProvider
@inject NavigationManager navigationManager

@if (ShoppingCartItems == null)
{
    <DisplaySpinner />
}
else
{

    <div class="card mx-auto mt-5" style="width: 18rem; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);">
        <div class="card-body" style="background-color: rebeccapurple; color: white;">
            <h5 class="card-title">Thank you for your purchase!</h5>
            <p class="card-text">You will have received an email about your order information.</p>
        </div>
    </div>
}

@code {
    [Inject]
    ICartOrderTransferService CartOrderTransferService { get; set; } = default!;

    [Inject]
    ICartItemsService CartItemService { get; set; } = default!;

    [Inject]
    IDiscountService DiscountService { get; set; } = default!;

    [Inject]
    DiscountCodeState discountCodeState { get; set; } = default!;

    List<ToastMessage> messages = new List<ToastMessage>();

    private void ShowMessage(ToastType toastType) => messages.Add(CreateToastMessage(toastType));

    public string? discountCode { get; set; }

    protected List<CartItemDto> ShoppingCartItems { get; set; } = default!;

    private ClaimsPrincipal User = default!;

    private int UserId;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            await GetAuthenticatedUserCart();

            if (User != null && User.Identity!.IsAuthenticated)
            {
                ShoppingCartItems = await CartItemService.GetCartItems(UserId);

                if (ShoppingCartItems?.Count != 0)
                {
                    await CartOrderTransfer(UserId);
                    ShowMessage(ToastType.Success);
                }
            }
            else
            {
                navigationManager.NavigateTo("");
            }

        }
        catch (Exception)
        {

            throw;
        }

    }

    private ToastMessage CreateToastMessage(ToastType toastType)
        => new ToastMessage
            {
                Type = toastType,
                Title = "Happy purchase!",
                HelpText = $"{DateTime.UtcNow}",
                Message = $"Thank you for your purchase! Orders can be found in your profile. DateTime: {DateTime.UtcNow}"
            };

    protected async Task GetAuthenticatedUserCart()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();

        User = authState.User;

        string userIdClaimValue = User.FindFirst(ClaimTypes.NameIdentifier)?.Value!;
        if (int.TryParse(userIdClaimValue, out int userId))
        {
            UserId = userId;
        }
    }

    protected async Task CartOrderTransfer(int userId)
    {
        discountCode = discountCodeState.DiscountCode;

        await CartOrderTransferService.CartOrderTransfer(userId, discountCode);

    }
}
