@page "/CheckoutSuccess"
@inject CustomStateProvider authenticationStateProvider
@inject NavigationManager navigationManager

@if (ShoppingCartItems == null)
{
    <DisplaySpinner />
}
else
{
    @if(OrderItems == null)
    {
        <DisplaySpinner />
    }
    else if(OrderItems.Count > 0)
    {

        <div class="col-md-6"> 
            <h4 class="mb-2">Order Summary</h4>
            <h8 class="mb-2">Order Serialnumber: @Order.Id - Date: @Order.OrderStatus.StatusDate - OrderStatus : @Order.OrderStatus.CurrentStatus</h8>
            @if (OrderItems.Count() > 0)
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th>Product</th>
                            <th>Quantity</th>
                            <th>Product Description</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in OrderItems)
                        {
                            <tr>
                                <td>@item.Product.Name</td>
                                <th>@item.Quantity</th>
                                <td>@item.Product.Description</td>
                                <td>@item.Quantity</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }

        </div>
    }
    else
    {
        <h5>There was no orders to be retrieved</h5>
    }

}

@code {
    [Inject]
    ICartOrderTransferService CartOrderTransferService { get; set; } = default!;

    [Inject]
    ICartItemsService CartItemService { get; set; } = default!;

    [Inject]
    IOrderItemsService OrderItemService { get; set; } = default!;

    [Inject]
    IOrdersService OrderService { get; set; } = default!;

    [Inject]
    IDiscountService DiscountService { get; set; } = default!;

    [Inject]
    DiscountCodeState discountCodeState { get; set; } = default!;

    public string? discountCode { get; set; }

    protected List<CartItemDto> ShoppingCartItems { get; set; } = default!;

    private ClaimsPrincipal User = default!;

    protected List<OrderItemDto> OrderItems { get; set; } = default!;

    protected OrderDto Order { get; set; } = default!;

    private int UserId;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            await GetAuthenticatedUserCart();

            if (User != null && User.Identity!.IsAuthenticated)
            {
                ShoppingCartItems = await CartItemService.GetCartItems(UserId);

                if (ShoppingCartItems?.Count != 0)
                {
                    await CartOrderTransfer(UserId);
                }

                Order = await OrderService.GetLastOrderFromUser(UserId);

                OrderItems = await OrderItemService.GetOrderItemsFromOrder(Order.Id);
            }
            else
            {
                navigationManager.NavigateTo("");
            }

        }
        catch (Exception)
        {

            throw;
        }

    }

    protected async Task GetAuthenticatedUserCart()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();

        User = authState.User;

        string userIdClaimValue = User.FindFirst(ClaimTypes.NameIdentifier)?.Value!;
        if (int.TryParse(userIdClaimValue, out int userId))
        {
            UserId = userId;
        }
    }

    protected async Task CartOrderTransfer(int userId)
    {
        discountCode = discountCodeState.DiscountCode;

        await CartOrderTransferService.CartOrderTransfer(userId, discountCode);
    }
}
