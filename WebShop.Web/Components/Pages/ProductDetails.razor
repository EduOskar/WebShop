@page "/ProductDetails/{productId:int}"
@inject CustomStateProvider authenticationStateProvider
@inject IJSRuntime JSRuntime;

@if (Product == null && ErrorMessage == null)
{
    <DisplaySpinner />
}
else if (ErrorMessage != null)
{
    <DisplayError ErrorMessage="@ErrorMessage"></DisplayError>
}
else
{
    <div class="row mb-5">
        <div class="col-md-6 mb-4">
            <img class="img-fluid" src="@Product?.ImageURL" />
        </div>
        <div class="col-md-6">
            <h3>@Product?.Name</h3>
            <p>@Product?.Description</p>
            <p>
                <strong>
                    @Product?.Price.ToString("C") (@Product?.Quantity items in stock);
                </strong>
            </p>
            @if (!User.Identity!.IsAuthenticated)
            {
                <h5>You need to be logged in to have a shopping cart</h5>
                <a href="" class="btn btn-primary">Proceed to login</a>
            }
            else
            {
                <button class="btn btn-success" @onclick="() => AddToCart_Click(new CartItemDto { CartId = cart.Id, ProductId = Product!.Id, Quantity = 1 })">
                    Add to Cart
                </button>
            }
        </div>
    </div>

    @if (User.Identity!.IsAuthenticated)
    {
        <CreateReview ProductId="@productId" UserId="@UserId" Review="@currentReview" OnReviewSaved="OnReviewSaved" />
    }

    <div class="row">
        <div class="col-12">
            @if (ReviewList == null)
            {
                <h5>Error fetching Reviews</h5>
            }
            else if (!ReviewList.Any())
            {
                <h5>No Reviews for this product</h5>
            }
            else
            {
                @foreach (var review in ReviewList)
                {
                    <ReviewDisplay Review="review" UserId="@UserId" OnEditRequested="HandleEditRequest" OnReviewDeleted="OnReviewDeleted"/>
                } 
            }
        </div>
    </div>
}



@code {
    private ReviewDto currentReview = new ReviewDto();

    [Parameter]
    public int productId { get; set; }

    [Parameter]
    public ReviewDto Review { get; set; } = default!;

    [Inject]
    public IReviewServices ReviewService { get; set; } = default!;

    [Inject]
    public IProductsService ProductsService { get; set; } = default!;

    [Inject]
    public ICartItemsService CartItemsService { get; set; } = default!;

    [Inject]
    private ICartsService CartsService { get; set; } = default!;

    [Inject]
    private IUsersService UserService { get; set; } = default!;

    [Inject]
    public NavigationManager NavigationManager { get; set; } = default!;

    public ProductDto Product { get; set; } = default!;

    public string? ErrorMessage { get; set; }

    public List<ReviewDto> ReviewList { get; set; } = default!;

    private List<CartItemDto>? ShoppingCartItems { get; set; }

    private ClaimsPrincipal User = default!;

    private int UserId;

    private CartDto cart = default!;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            await GetAuthenticatedUserCart();

            if (User != null && User.Identity!.IsAuthenticated)
            {
                cart = await CartsService.GetCartByUser(UserId);

                var UserCartItems = await UserService.GetUser(UserId);

                ShoppingCartItems = await CartItemsService.GetCartItems(UserCartItems.Id);

            }

            Product = await ProductsService.GetProduct(productId)!;

            ReviewList = new List<ReviewDto>();

            await FetchReviews();
        }
        catch (Exception)
        {
            throw;
        }
    }

    protected async Task GetAuthenticatedUserCart()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();

        User = authState.User;

        string userIdClaimValue = User.FindFirst(ClaimTypes.NameIdentifier)?.Value!;
        if (int.TryParse(userIdClaimValue, out int userId))
        {
            UserId = userId;
        }


    }

    private async Task ShowEditModal()
    {
        await JSRuntime.InvokeVoidAsync("eval", "new bootstrap.Modal(document.getElementById('addReviewModal')).show()");
    }

    private async void HandleEditRequest(ReviewDto review)
    {
        currentReview = review;
        await ShowEditModal();

    }

    private async Task OnReviewSaved(bool isSuccess)
    {
        if (isSuccess)
        {
            await FetchReviews();
        }
    }

    private async Task OnReviewAdded()
    {
        await FetchReviews();

    }

    private async Task OnReviewDeleted(bool isSuccess)
    {
        if (isSuccess)
        {
            await FetchReviews();
        }
    }

    protected async Task FetchReviews()
    {
        ReviewList = await ReviewService.GetReviewsByProduct(productId);
        StateHasChanged();
    }

    protected async Task AddToCart_Click(CartItemDto cartItemCreate)
    {
        try
        {
            var cartItem = await CartItemsService.CreateCartItem(cartItemCreate);
            NavigationManager.NavigateTo("/ShoppingCart");
        }
        catch (Exception)
        {

            throw;
        }
    }

}
