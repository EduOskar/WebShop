@page "/ProductDetails/{productId:int}"
@inject CustomStateProvider authenticationStateProvider

@if (Product == null && ErrorMessage == null)
{
    <DisplaySpinner />
}
else if (ErrorMessage != null)
{
    <DisplayError ErrorMessage="@ErrorMessage"></DisplayError>
}
else
{
    <h3 class="mb-5">Product details</h3>
    <div class="row">
        <div class="col-md-6 mb-4">
            <img class="img-fluid" src="@Product?.ImageURL" />
        </div>
        <div class="col-md-6">
            <h3>@Product?.Name</h3>
            <p class="mb-4">@Product?.Description</p>
            <p class="mb-4">
                <b>
                    @Product?.Price.ToString("C")&nbsp;(@Product?.Qty items in stock);
                </b>
            </p>
            @if (!User.Identity!.IsAuthenticated)
            {
                <h5>You need to be logged in to have a shoppingcart</h5>
                <a href="" class="btn btn-success">
                    <span></span>&nbsp; Proceed to login
                </a>
            }
            else
            {
                <div class="btn btn-success"
                     @onclick="() => (AddToCart_Click( new CartItemDto{
                CartId = cart.Id,
                ProductId = Product!.Id,
                Qty = 1
            }))">
                    <b>Add to Cart</b>
                </div>
            }

        </div>
    </div>
}


@* @if (productId is not null)
{
    <PageTitle>Create a new Product</PageTitle>
    <h3>Create a new Product</h3>
}
else
{
    <PageTitle>Edit @Product!.Name</PageTitle>
} *@

@* <EditForm>
    <div>
        <label for="name">Name</label>
        <InputText id="name" @bind-Value="Product.Name" class="form-control" />
    </div>
    <div>
        <label for="description">Description</label>
        <InputText id="description" @bind-Value="Product.Description" class="form-control" />
    </div>
    <div>
        <label for="price">Price</label>
        <InputNumber id="price" @bind-Value="Product.Price" class="form-control" />
    </div>
    <button type="submit" class="btn btn-primary">Update</button>
</EditForm> *@


@code {

    [Parameter]
    public int productId { get; set; }

    [Inject]
    public IProductsService ProductsService { get; set; } = default!;

    [Inject]
    public ICartItemsService CartItemsService { get; set; } = default!;

    [Inject]
    private ICartsService CartsService { get; set; } = default!;

    [Inject]
    private IUsersService UserService { get; set; } = default!;

    [Inject]
    public NavigationManager NavigationManager { get; set; } = default!;

    public ProductDto Product { get; set; } = default!;

    public string? ErrorMessage { get; set; }

    private List<CartItemDto>? ShoppingCartItems { get; set; }

    private ClaimsPrincipal User = default!;

    private int UserId;

    private CartDto cart = default!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await GetAuthenticatedUserCart();

            if (User != null && User.Identity!.IsAuthenticated)
            {
                cart = await CartsService.GetCartByUser(UserId);

                var UserCartItems = await UserService.GetUser(UserId);

                ShoppingCartItems = await CartItemsService.GetCartItems(UserCartItems.Id);
            }

            Product = await ProductsService.GetProduct(productId)!;
        }
        catch (Exception)
        {
            throw;
        }
    }

    // protected override async Task OnParameterSetAsync()
    // {
    //     throw new NotImplementedException();
    // }

    // async Task HandleSubmit()
    // {
    //     throw new NotImplementedException();
    // }

    protected async Task GetAuthenticatedUserCart()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();

        User = authState.User;

        string userIdClaimValue = User.FindFirst(ClaimTypes.NameIdentifier)?.Value!;
        if (int.TryParse(userIdClaimValue, out int userId))
        {
            UserId = userId;
        }
    }

    protected async Task AddToCart_Click(CartItemDto cartItemCreate)
    {
        try
        {
            var cartItem = await CartItemsService.CreateCartItem(cartItemCreate);
            NavigationManager.NavigateTo("/ShoppingCart");
        }
        catch (Exception)
        {

            throw;
        }
    }

}
