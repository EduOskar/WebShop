@inherits LayoutComponentBase
@inject NavigationManager navigationManager
@inject CustomStateProvider authenticationStateProvider


<div class="container-fluid">
    <div class="row">
        @if (!isWarehouseWorker)
        {
            <div class="sidebar">

                <NavMenu />

            </div>

        }
        <main>
            <div class="top-row px-4">
                <CartMenu />
                <button type="button" class="btn btn-link" @onclick="@HandleLogin">@Message</button>
                <AuthorizeView Roles="User, Admin">
                    <Authorized>
                        <ProfilePageNav />
                    </Authorized>
                </AuthorizeView>

            </div>
            <div class="container-fluid">
                <AuthorizeView roles="Admin">
                    <Authorized>
                        <AdminLayout />
                    </Authorized>
                </AuthorizeView>
            </div>

            <article class="content px-4">
                @Body
            </article>

        </main>

    </div>
</div>


<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@functions {
    [CascadingParameter]
    Task<AuthenticationState> AuthenticationState { get; set; } = default!;

    private bool showProfilePageDropDown = false;

    private bool isWarehouseWorker = false;

    String Message = "Login";

    protected override async Task OnParametersSetAsync()
    {


        if (!(await AuthenticationState).User.Identity!.IsAuthenticated)
        {
            Message = "Login";
        }
        else
        {
            var user = (await AuthenticationState).User;
            Message = "Logout";
            isWarehouseWorker = user.IsInRole("Warehouse Worker");
        }
    }

    private void ToggleProfilePageDropdown()
    {
        showProfilePageDropDown = !showProfilePageDropDown;
    }

    async Task HandleLogin()
    {
        if ((await AuthenticationState).User.Identity!.IsAuthenticated)
        {
            await authenticationStateProvider.Logout();
            navigationManager.NavigateTo("/");
        }
        else
        {
            navigationManager.NavigateTo("/");
        }

    }
}
