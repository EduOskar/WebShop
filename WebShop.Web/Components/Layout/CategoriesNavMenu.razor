
@if (ProductCategory == null && ErrorMessage == null)
{
    <DisplaySpinner />
}
else if (ErrorMessage != null)
{
    <DisplayError ErrorMessage="@ErrorMessage" />
}
else
{
    @foreach (var productCategory in ProductCategory!)
    {
        var link = "/ProductsByCategory/" + productCategory.Id;

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="@link">
                <span class="@productCategory.IconCSS"></span>@productCategory.Name
            </NavLink>
        </div>
    }
}

@code {

    [Inject]
    public IProductsCategoryService CategoryService { get; set; } = default!;

    [Inject]
    public CategoryStateService categoryStateService { get; set; } = default!;

    public List<ProductCategoryDto> ProductCategory { get; set; } = default!;

    public string? ErrorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
    }
       
    public async Task RefreshCategoriesList()
    {
        await LoadCategories();
    }

    private async Task LoadCategories()
    {
        try
        {
            ProductCategory = await CategoryService.GetCategories();
            categoryStateService.NotifyCategoryStateChanged();
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }
}
